Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -Qinline-factor: 100
  -Qinline-min-size: 30
  -Qinline-max-size: 276
  -Qinline-max-total-size: 2000
  -Qinline-max-per-routine: disabled
  -Qinline-max-per-compile: disabled


Begin optimization report for: main(int, const char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, const char **)) [1] D:\Code\KS\matmul-implement\main.cpp(14,41)
  -> (16,2) run_recursive_bilinear_algorithm()


    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\main.cpp(14,41):remark #34051: REGISTER ALLOCATION : [main] D:\Code\KS\matmul-implement\main.cpp:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    3[ rax rdx rcx]
        
    Routine temporaries
        Total         :      28
            Global    :      18
            Local     :      10
        Regenerable   :       8
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: run_recursive_bilinear_algorithm()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (run_recursive_bilinear_algorithm()) [2] D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(31,40)
  -> INLINE: (37,24) get_transformed_A_size(int, int)
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(20,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (39,24) get_transformed_B_size(int, int)
    -> INLINE: D:\Code\KS\matmul-implement\v_transform.cpp:(20,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (40,24) get_transformed_C_size(int, int)
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(18,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (50,23) get_transformed_A_size(int, int)
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(20,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (51,2) get_transformed_C_size(int, int)
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(18,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (51,2) get_transformed_C_size(int, int)
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(18,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (55,2) transformA(double *, double *, int, int, double *)
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(28,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(31,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(34,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(37,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\u_transform.cpp:(40,2) sqrt<int, void>(int)
    -> D:\Code\KS\matmul-implement\u_transform.cpp:(40,2) u_phi_0_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\u_transform.cpp:(41,2) u_phi_1_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\u_transform.cpp:(42,2) u_phi_2_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\u_transform.cpp:(43,2) u_phi_3_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\u_transform.cpp:(44,2) u_phi_4_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\u_transform.cpp:(45,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (56,2) transformB(double *, double *, int, int, double *)
    -> INLINE: D:\Code\KS\matmul-implement\v_transform.cpp:(28,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\v_transform.cpp:(31,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\v_transform.cpp:(34,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\v_transform.cpp:(37,2) get_transformed_size(int, int, int, int)
      -> INLINE: (13,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (14,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\v_transform.cpp:(40,2) sqrt<int, void>(int)
    -> D:\Code\KS\matmul-implement\v_transform.cpp:(40,2) v_psi_0_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\v_transform.cpp:(41,2) v_psi_1_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\v_transform.cpp:(42,2) v_psi_2_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\v_transform.cpp:(43,2) v_psi_3_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\v_transform.cpp:(44,2) v_psi_4_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\v_transform.cpp:(45,2) v_psi_5_transform(double *, double *, int, int, double *)
  -> (57,2) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (58,2) transformC(double *, double *, int, int, double *)
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(25,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(28,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(31,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(34,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: D:\Code\KS\matmul-implement\w_transform.cpp:(37,2) get_transformed_size(int, int, int, int)
      -> INLINE: (11,22) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
      -> INLINE: (12,12) pow<int, int, void>(int, int)
         {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> D:\Code\KS\matmul-implement\w_transform.cpp:(41,2) w_tau_5_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\w_transform.cpp:(42,2) w_tau_4_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\w_transform.cpp:(43,2) w_tau_3_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\w_transform.cpp:(44,2) w_tau_2_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\w_transform.cpp:(45,2) w_tau_1_transform(double *, double *, int, int, double *)
    -> D:\Code\KS\matmul-implement\w_transform.cpp:(46,2) w_tau_0_transform(double *, double *, int, int, double *)
  -> (63,3) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(44,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(44,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(44,2)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(44,2)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(51,2)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(61,2)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(31,40):remark #34051: REGISTER ALLOCATION : [?run_recursive_bilinear_algorithm@@YAHXZ] D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp:31

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12 r14-r15 zmm0-zmm3 zmm11-zmm12 zmm15]
        
    Routine temporaries
        Total         :     451
            Global    :     160
            Local     :     291
        Regenerable   :     127
        Spilled       :      27
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :     184 bytes*
            Reads     :      44 [4.17e+001 ~ 5.9%]
            Writes    :      20 [2.00e+001 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream(710,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\streambuf(163,9) ]
LOOP END

LOOP BEGIN at C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream(723,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\streambuf(163,9) ]
LOOP END

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase(226,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(366,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase(226,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(366,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream(696,23):remark #34051: REGISTER ALLOCATION : [??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream:696

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r11 r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     432
            Global    :     230
            Local     :     202
        Regenerable   :      67
        Spilled       :       5
        
    Routine stack
        Variables     :     376 bytes*
            Reads     :      25 [3.57e+000 ~ 2.6%]
            Writes    :      36 [8.18e+000 ~ 5.9%]
        Spills        :      40 bytes*
            Reads     :       5 [2.24e+000 ~ 1.6%]
            Writes    :       5 [3.00e+000 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::_Sentry_base::~_Sentry_base(std::basic_ostream<char, std::char_traits<char>>::_Sentry_base *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream(75,53):remark #34051: REGISTER ALLOCATION : [??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    3[ rax rdx rcx]
        
    Routine temporaries
        Total         :      29
            Global    :      20
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 3.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: u_phi_5_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (u_phi_5_transform(double *, double *, int, int, double *)) [5] D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(171,107)
  -> INLINE: (174,23) transformed_block_size(int, int)
    -> INLINE: (4,22) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (5,12) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (180,3) S1_sum(const double *, double *, int)
  -> INLINE: (181,3) S2_sum(const double *, double *, int)
  -> INLINE: (182,3) S3_sum(const double *, double *, int)
  -> INLINE: (183,3) S4_sum(const double *, double *, int)
  -> INLINE: (184,3) S5_sum(const double *, double *, int)
  -> INLINE: (185,3) S6_sum(const double *, double *, int)
  -> INLINE: (186,3) S7_sum(const double *, double *, int)
  -> INLINE: (187,3) S8_sum(const double *, double *, int)
  -> INLINE: (188,3) S9_sum(const double *, double *, int)
  -> INLINE: (189,3) S10_sum(const double *, double *, int)
  -> INLINE: (190,3) S11_sum(const double *, double *, int)
  -> INLINE: (191,3) S12_sum(const double *, double *, int)
  -> INLINE: (192,3) S13_sum(const double *, double *, int)
  -> INLINE: (193,3) S14_sum(const double *, double *, int)
  -> INLINE: (194,3) S15_sum(const double *, double *, int)
  -> INLINE: (195,3) S16_sum(const double *, double *, int)
  -> INLINE: (196,3) S17_sum(const double *, double *, int)
  -> INLINE: (197,3) S18_sum(const double *, double *, int)
  -> INLINE: (198,3) S19_sum(const double *, double *, int)
  -> INLINE: (199,3) S20_sum(const double *, double *, int)
  -> INLINE: (206,2) S1_sum(const double *, double *, int)
  -> (207,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (209,2) S2_sum(const double *, double *, int)
  -> (210,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (212,2) S3_sum(const double *, double *, int)
  -> (213,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (215,2) S4_sum(const double *, double *, int)
  -> (216,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (218,2) S5_sum(const double *, double *, int)
  -> (219,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (221,2) S6_sum(const double *, double *, int)
  -> (222,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (224,2) S7_sum(const double *, double *, int)
  -> (225,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (227,2) S8_sum(const double *, double *, int)
  -> (228,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (230,2) S9_sum(const double *, double *, int)
  -> (231,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (233,2) S10_sum(const double *, double *, int)
  -> (234,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (236,2) S11_sum(const double *, double *, int)
  -> (237,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (239,2) S12_sum(const double *, double *, int)
  -> (240,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (242,2) S13_sum(const double *, double *, int)
  -> (243,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (245,2) S14_sum(const double *, double *, int)
  -> (246,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (248,2) S15_sum(const double *, double *, int)
  -> (249,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (251,2) S16_sum(const double *, double *, int)
  -> (252,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (254,2) S17_sum(const double *, double *, int)
  -> (255,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (257,2) S18_sum(const double *, double *, int)
  -> (258,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (260,2) S19_sum(const double *, double *, int)
  -> (261,2) u_phi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (263,2) S20_sum(const double *, double *, int)
  -> (264,2) u_phi_5_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(206,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(209,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(212,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(215,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(218,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(221,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(224,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(227,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(230,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(233,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(236,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(239,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(242,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(245,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(248,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(251,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(254,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(257,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(260,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(263,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(180,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(181,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(182,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(183,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(184,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(185,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(186,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(187,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(188,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(189,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(190,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(191,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(192,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(193,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(194,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(195,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(196,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(197,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(198,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(199,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(206,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(206,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(206,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(209,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(209,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(209,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(212,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(212,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(212,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(215,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(215,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(215,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(218,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(218,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(218,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(221,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(221,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(221,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(224,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(224,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(224,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(227,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(227,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(227,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(230,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(230,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(230,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(233,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(233,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(233,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(236,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(236,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(236,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(239,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(239,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(239,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(242,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(242,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(242,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(245,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(245,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(245,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(248,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(248,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(248,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(251,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(251,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(251,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(254,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(254,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(254,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(257,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(257,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(257,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(260,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(260,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(260,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(263,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(263,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(263,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(180,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(180,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(180,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(181,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(181,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(181,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(182,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(182,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(182,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(183,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(183,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(183,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(184,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(184,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(184,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(185,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(185,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(185,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(186,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(186,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(186,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(187,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(187,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(187,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(188,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(188,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(188,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(189,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(189,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(189,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(190,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(190,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(190,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(191,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(191,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(191,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(192,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(192,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(192,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(193,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(193,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(193,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(194,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(194,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(194,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(195,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(195,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(195,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(196,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(196,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(196,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(197,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(197,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(197,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(198,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(198,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(198,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(199,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(199,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1) inlined into D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(199,3)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(164,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(156,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(148,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(140,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(132,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(124,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(116,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(108,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(76,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(68,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(60,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(44,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(171,107):remark #34051: REGISTER ALLOCATION : [?u_phi_5_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\u_phi_5_transform.cpp:171

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    4945
            Global    :    1646
            Local     :    3299
        Regenerable   :    1333
        Spilled       :     273
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :     160 [0.00e+000 ~ 0.0%]
            Writes    :     281 [3.07e+002 ~ 9.4%]
        Spills        :     640 bytes*
            Reads     :      89 [1.41e+001 ~ 0.4%]
            Writes    :      79 [2.75e+001 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: u_phi_4_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (u_phi_4_transform(double *, double *, int, int, double *)) [6] D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(147,107)
  -> INLINE: (150,23) transformed_block_size(int, int)
    -> INLINE: (4,22) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (5,12) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (156,3) S1_sum(const double *, double *, int)
  -> INLINE: (157,3) S2_sum(const double *, double *, int)
  -> INLINE: (158,3) S3_sum(const double *, double *, int)
  -> INLINE: (159,3) S4_sum(const double *, double *, int)
  -> INLINE: (160,3) S5_sum(const double *, double *, int)
  -> INLINE: (161,3) S6_sum(const double *, double *, int)
  -> INLINE: (162,3) S7_sum(const double *, double *, int)
  -> INLINE: (163,3) S8_sum(const double *, double *, int)
  -> INLINE: (164,3) S9_sum(const double *, double *, int)
  -> INLINE: (165,3) S10_sum(const double *, double *, int)
  -> INLINE: (166,3) S11_sum(const double *, double *, int)
  -> INLINE: (167,3) S12_sum(const double *, double *, int)
  -> INLINE: (168,3) S13_sum(const double *, double *, int)
  -> INLINE: (169,3) S14_sum(const double *, double *, int)
  -> INLINE: (170,3) S15_sum(const double *, double *, int)
  -> INLINE: (171,3) S16_sum(const double *, double *, int)
  -> INLINE: (172,3) S17_sum(const double *, double *, int)
  -> INLINE: (179,2) S1_sum(const double *, double *, int)
  -> (180,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (182,2) S2_sum(const double *, double *, int)
  -> (183,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (185,2) S3_sum(const double *, double *, int)
  -> (186,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (188,2) S4_sum(const double *, double *, int)
  -> (189,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (191,2) S5_sum(const double *, double *, int)
  -> (192,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (194,2) S6_sum(const double *, double *, int)
  -> (195,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (197,2) S7_sum(const double *, double *, int)
  -> (198,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (200,2) S8_sum(const double *, double *, int)
  -> (201,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (203,2) S9_sum(const double *, double *, int)
  -> (204,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (206,2) S10_sum(const double *, double *, int)
  -> (207,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (209,2) S11_sum(const double *, double *, int)
  -> (210,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (212,2) S12_sum(const double *, double *, int)
  -> (213,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (215,2) S13_sum(const double *, double *, int)
  -> (216,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (218,2) S14_sum(const double *, double *, int)
  -> (219,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (221,2) S15_sum(const double *, double *, int)
  -> (222,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (224,2) S16_sum(const double *, double *, int)
  -> (225,2) u_phi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (227,2) S17_sum(const double *, double *, int)
  -> (228,2) u_phi_4_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(179,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(182,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(185,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(188,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(191,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(194,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(197,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(200,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(203,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(206,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(209,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(212,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(215,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(218,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(221,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(224,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(227,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(156,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(157,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(158,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(159,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(160,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(161,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(162,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(163,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(164,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(165,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(166,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(167,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(168,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(169,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(170,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(171,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(172,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(179,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(179,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(179,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(182,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(182,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(182,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(185,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(185,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(185,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(188,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(188,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(188,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(191,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(191,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(191,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(194,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(194,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(194,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(197,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(197,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(197,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(200,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(200,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(200,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(203,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(203,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(203,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(206,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(206,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(206,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(209,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(209,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(209,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(212,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(212,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(212,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(215,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(215,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(215,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(218,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(218,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(218,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(221,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(221,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(221,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(224,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(224,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(224,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(227,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(227,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(227,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(156,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(156,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(156,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(157,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(157,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(157,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(158,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(158,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(158,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(159,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(159,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(159,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(160,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(160,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(160,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(161,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(161,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(161,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(162,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(162,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(162,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(163,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(163,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(163,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(164,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(164,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(164,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(165,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(165,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(165,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(166,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(166,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(166,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(167,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(167,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(167,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(168,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(168,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(168,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(169,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(169,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(169,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(170,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(170,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(170,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(171,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(171,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(171,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(172,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(172,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1) inlined into D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(172,3)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(140,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(132,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(124,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(116,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(108,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(76,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(68,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(44,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(12,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(147,107):remark #34051: REGISTER ALLOCATION : [?u_phi_4_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\u_phi_4_transform.cpp:147

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm14]
        
    Routine temporaries
        Total         :    4203
            Global    :    1412
            Local     :    2791
        Regenerable   :    1135
        Spilled       :     231
        
    Routine stack
        Variables     :    1228 bytes*
            Reads     :     136 [0.00e+000 ~ 0.0%]
            Writes    :     239 [2.61e+002 ~ 9.3%]
        Spills        :     544 bytes*
            Reads     :      75 [1.02e+001 ~ 0.4%]
            Writes    :      67 [2.38e+001 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: u_phi_3_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (u_phi_3_transform(double *, double *, int, int, double *)) [7] D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(124,107)
  -> INLINE: (127,23) transformed_block_size(int, int)
    -> INLINE: (4,22) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (5,12) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (133,3) S1_sum(const double *, double *, int)
  -> INLINE: (134,3) S2_sum(const double *, double *, int)
  -> INLINE: (135,3) S3_sum(const double *, double *, int)
  -> INLINE: (136,3) S4_sum(const double *, double *, int)
  -> INLINE: (137,3) S5_sum(const double *, double *, int)
  -> INLINE: (138,3) S6_sum(const double *, double *, int)
  -> INLINE: (139,3) S7_sum(const double *, double *, int)
  -> INLINE: (140,3) S8_sum(const double *, double *, int)
  -> INLINE: (141,3) S9_sum(const double *, double *, int)
  -> INLINE: (142,3) S10_sum(const double *, double *, int)
  -> INLINE: (143,3) S11_sum(const double *, double *, int)
  -> INLINE: (144,3) S12_sum(const double *, double *, int)
  -> INLINE: (145,3) S13_sum(const double *, double *, int)
  -> INLINE: (146,3) S14_sum(const double *, double *, int)
  -> INLINE: (153,2) S1_sum(const double *, double *, int)
  -> (154,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (156,2) S2_sum(const double *, double *, int)
  -> (157,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (159,2) S3_sum(const double *, double *, int)
  -> (160,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (162,2) S4_sum(const double *, double *, int)
  -> (163,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (165,2) S5_sum(const double *, double *, int)
  -> (166,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (168,2) S6_sum(const double *, double *, int)
  -> (169,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (171,2) S7_sum(const double *, double *, int)
  -> (172,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (174,2) S8_sum(const double *, double *, int)
  -> (175,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (177,2) S9_sum(const double *, double *, int)
  -> (178,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (180,2) S10_sum(const double *, double *, int)
  -> (181,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (183,2) S11_sum(const double *, double *, int)
  -> (184,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (186,2) S12_sum(const double *, double *, int)
  -> (187,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (189,2) S13_sum(const double *, double *, int)
  -> (190,2) u_phi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (192,2) S14_sum(const double *, double *, int)
  -> (193,2) u_phi_3_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(153,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(156,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(159,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(162,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(165,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(168,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(171,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(174,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(177,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(180,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(183,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(186,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(189,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(192,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(133,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(134,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(135,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(136,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(137,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(138,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(139,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(140,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(141,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(142,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(143,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(144,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(145,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(146,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(153,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(153,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(153,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(156,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(156,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(156,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(159,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(159,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(159,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(162,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(162,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(162,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(165,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(165,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(165,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(168,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(168,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(168,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(171,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(171,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(171,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(174,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(174,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(174,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(177,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(177,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(177,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(180,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(180,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(180,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(183,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(183,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(183,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(186,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(186,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(186,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(189,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(189,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(189,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(192,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(192,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(192,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(133,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(133,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(133,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(134,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(134,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(134,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(135,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(135,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(135,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(136,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(136,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(136,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(137,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(137,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(137,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(138,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(138,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(138,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(139,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(139,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(139,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(140,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(140,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(140,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(141,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(141,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(141,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(142,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(142,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(142,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(143,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(143,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(143,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(144,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(144,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(144,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(145,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(145,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(145,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(146,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(146,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1) inlined into D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(146,3)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(116,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(108,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(60,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(44,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(28,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(20,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(12,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(124,107):remark #34051: REGISTER ALLOCATION : [?u_phi_3_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\u_phi_3_transform.cpp:124

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm12]
        
    Routine temporaries
        Total         :    3445
            Global    :    1158
            Local     :    2287
        Regenerable   :     935
        Spilled       :     189
        
    Routine stack
        Variables     :    1012 bytes*
            Reads     :     112 [0.00e+000 ~ 0.0%]
            Writes    :     197 [2.15e+002 ~ 9.4%]
        Spills        :    1072 bytes*
            Reads     :     147 [1.79e+001 ~ 0.8%]
            Writes    :     133 [4.72e+001 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: u_phi_2_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (u_phi_2_transform(double *, double *, int, int, double *)) [8] D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(107,107)
  -> INLINE: (110,23) transformed_block_size(int, int)
    -> INLINE: (4,22) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (5,20) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (116,3) S1_sum(const double *, double *, int)
  -> INLINE: (117,3) S2_sum(const double *, double *, int)
  -> INLINE: (118,3) S3_sum(const double *, double *, int)
  -> INLINE: (119,3) S4_sum(const double *, double *, int)
  -> INLINE: (120,3) S5_sum(const double *, double *, int)
  -> INLINE: (121,3) S6_sum(const double *, double *, int)
  -> INLINE: (122,3) S7_sum(const double *, double *, int)
  -> INLINE: (123,3) S8_sum(const double *, double *, int)
  -> INLINE: (124,3) S9_sum(const double *, double *, int)
  -> INLINE: (125,3) S10_sum(const double *, double *, int)
  -> INLINE: (126,3) S11_sum(const double *, double *, int)
  -> INLINE: (127,3) S12_sum(const double *, double *, int)
  -> INLINE: (134,2) S1_sum(const double *, double *, int)
  -> (135,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (137,2) S2_sum(const double *, double *, int)
  -> (138,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (140,2) S3_sum(const double *, double *, int)
  -> (141,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (143,2) S4_sum(const double *, double *, int)
  -> (144,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (146,2) S5_sum(const double *, double *, int)
  -> (147,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (149,2) S6_sum(const double *, double *, int)
  -> (150,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (152,2) S7_sum(const double *, double *, int)
  -> (153,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (155,2) S8_sum(const double *, double *, int)
  -> (156,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (158,2) S9_sum(const double *, double *, int)
  -> (159,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (161,2) S10_sum(const double *, double *, int)
  -> (162,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (164,2) S11_sum(const double *, double *, int)
  -> (165,2) u_phi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (167,2) S12_sum(const double *, double *, int)
  -> (168,2) u_phi_2_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(134,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(137,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(140,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(143,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(146,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(149,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(152,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(155,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(158,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(161,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(164,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(167,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(116,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(117,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(118,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(119,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(120,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(121,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(122,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(123,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(124,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(125,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(126,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(127,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(134,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(134,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(134,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(137,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(137,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(137,2)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(137,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(140,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(140,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(140,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(143,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(143,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(143,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(146,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(146,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(146,2)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(146,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(149,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(149,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(149,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(152,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(152,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(152,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(155,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(155,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(155,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(158,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(158,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(158,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(161,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(161,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(161,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(164,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(164,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(164,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(167,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(167,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(167,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(116,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(116,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(116,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(117,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(117,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(117,3)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(20,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(117,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(118,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(118,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(118,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(119,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(119,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(119,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(120,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(120,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(120,3)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(44,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(120,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(121,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(121,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(121,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(122,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(122,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(122,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(123,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(123,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(123,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(124,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(124,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(124,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(125,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(125,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(125,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(126,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(126,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(126,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(127,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(127,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1) inlined into D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(127,3)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(100,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(92,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(84,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(76,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(68,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(60,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(52,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(36,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(28,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(12,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(107,107):remark #34051: REGISTER ALLOCATION : [?u_phi_2_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\u_phi_2_transform.cpp:107

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm7]
        
    Routine temporaries
        Total         :    3215
            Global    :    1042
            Local     :    2173
        Regenerable   :     799
        Spilled       :     169
        
    Routine stack
        Variables     :     868 bytes*
            Reads     :      96 [0.00e+000 ~ 0.0%]
            Writes    :     169 [1.85e+002 ~ 8.3%]
        Spills        :     760 bytes*
            Reads     :     105 [1.41e+001 ~ 0.6%]
            Writes    :      94 [3.38e+001 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: u_phi_1_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (u_phi_1_transform(double *, double *, int, int, double *)) [9] D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(92,107)
  -> INLINE: (95,23) transformed_block_size(int, int)
    -> INLINE: (5,22) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (6,17) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (101,3) S1_sum(const double *, double *, int)
  -> INLINE: (102,3) S2_sum(const double *, double *, int)
  -> INLINE: (103,3) S3_sum(const double *, double *, int)
  -> INLINE: (104,3) S4_sum(const double *, double *, int)
  -> INLINE: (105,3) S5_sum(const double *, double *, int)
  -> INLINE: (106,3) S6_sum(const double *, double *, int)
  -> INLINE: (107,3) S7_sum(const double *, double *, int)
  -> INLINE: (108,3) S8_sum(const double *, double *, int)
  -> INLINE: (109,3) S9_sum(const double *, double *, int)
  -> INLINE: (110,3) S10_sum(const double *, double *, int)
  -> INLINE: (117,2) S1_sum(const double *, double *, int)
  -> (118,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (120,2) S2_sum(const double *, double *, int)
  -> (121,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (123,2) S3_sum(const double *, double *, int)
  -> (124,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (126,2) S4_sum(const double *, double *, int)
  -> (127,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (129,2) S5_sum(const double *, double *, int)
  -> (130,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (132,2) S6_sum(const double *, double *, int)
  -> (133,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (135,2) S7_sum(const double *, double *, int)
  -> (136,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (138,2) S8_sum(const double *, double *, int)
  -> (139,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (141,2) S9_sum(const double *, double *, int)
  -> (142,2) u_phi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (144,2) S10_sum(const double *, double *, int)
  -> (145,2) u_phi_1_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(117,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(120,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(123,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(126,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(129,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(132,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(135,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(138,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(141,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(144,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(101,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(102,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(103,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(104,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(105,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(106,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(107,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(108,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(109,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(110,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(117,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(117,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(117,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(120,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(120,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(120,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(123,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(123,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(123,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(126,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(126,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(126,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(129,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(129,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(129,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(132,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(132,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(132,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(135,2)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(135,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(135,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(138,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(138,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(138,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(141,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(141,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(141,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(144,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(144,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(144,2)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(101,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(101,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(13,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(101,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(102,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(102,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(21,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(102,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(103,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(103,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(103,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(104,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(104,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(37,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(104,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(105,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(105,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(105,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(106,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(106,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(53,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(106,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(107,3)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(107,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(107,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(108,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(108,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(69,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(108,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(109,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(109,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(77,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(109,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(110,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(110,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(85,1) inlined into D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(110,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(61,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(29,1):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(92,107):remark #34051: REGISTER ALLOCATION : [?u_phi_1_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\u_phi_1_transform.cpp:92

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm12]
        
    Routine temporaries
        Total         :    2745
            Global    :     935
            Local     :    1810
        Regenerable   :     683
        Spilled       :     128
        
    Routine stack
        Variables     :     724 bytes*
            Reads     :      80 [0.00e+000 ~ 0.0%]
            Writes    :     141 [1.54e+002 ~ 6.6%]
        Spills        :    1032 bytes*
            Reads     :     144 [1.11e+001 ~ 0.5%]
            Writes    :     128 [4.77e+001 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: u_phi_0_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (u_phi_0_transform(double *, double *, int, int, double *)) [10] D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(120,105)
  -> INLINE: (129,3) S1_sum(const double *, double *, int)
  -> INLINE: (130,3) S2_sum(const double *, double *, int)
  -> INLINE: (131,3) S3_sum(const double *, double *, int)
  -> INLINE: (132,3) S4_sum(const double *, double *, int)
  -> INLINE: (133,3) S5_sum(const double *, double *, int)
  -> INLINE: (134,3) S6_sum(const double *, double *, int)
  -> INLINE: (135,3) S7_sum(const double *, double *, int)
  -> INLINE: (136,3) S8_sum(const double *, double *, int)
  -> INLINE: (137,3) S9_sum(const double *, double *, int)
  -> INLINE: (145,2) S1_sum(const double *, double *, int)
  -> (146,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (148,2) S2_sum(const double *, double *, int)
  -> (149,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (151,2) S3_sum(const double *, double *, int)
  -> (152,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (154,2) S4_sum(const double *, double *, int)
  -> (155,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (157,2) S5_sum(const double *, double *, int)
  -> (158,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (160,2) S6_sum(const double *, double *, int)
  -> (161,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (163,2) S7_sum(const double *, double *, int)
  -> (164,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (166,2) S8_sum(const double *, double *, int)
  -> (167,2) u_phi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (169,2) S9_sum(const double *, double *, int)
  -> (170,2) u_phi_0_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(15,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(145,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(27,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(148,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(39,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(151,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(51,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(154,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(63,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(157,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(75,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(160,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(87,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(163,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(99,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(166,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(111,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(169,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(15,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(129,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(27,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(130,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(39,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(131,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(51,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(132,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(63,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(133,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(75,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(134,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(87,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(135,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(99,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(136,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(111,1) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(137,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(17,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(145,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(145,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(145,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(145,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(145,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(29,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(148,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(148,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(148,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(148,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(148,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(41,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(151,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(151,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(151,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(151,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(151,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(53,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(154,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(154,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(154,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(154,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(154,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(65,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(157,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(157,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(157,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(157,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(157,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(77,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(160,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(160,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(160,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(160,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(160,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(89,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(163,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(163,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(163,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(163,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(163,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(101,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(166,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(166,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(166,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(166,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(166,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(113,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(169,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(169,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(169,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(169,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(169,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(17,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(129,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(129,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(129,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(129,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(18,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(129,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(29,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(130,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(130,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(130,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(130,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(30,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(130,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(41,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(131,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(131,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(131,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(131,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(42,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(131,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(53,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(132,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(132,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(132,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(132,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(54,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(132,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(65,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(133,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(133,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(133,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(133,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(66,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(133,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(77,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(134,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(134,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(134,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(134,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(78,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(134,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(89,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(135,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(135,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(135,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(135,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(90,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(135,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(101,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(136,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(136,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(136,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(136,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(102,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(136,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(113,2) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(137,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(137,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(137,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(137,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(114,3) inlined into D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(137,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(120,105):remark #34051: REGISTER ALLOCATION : [?u_phi_0_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\u_phi_0_transform.cpp:120

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    3580
            Global    :    1154
            Local     :    2426
        Regenerable   :     687
        Spilled       :     311
        
    Routine stack
        Variables     :     796 bytes*
            Reads     :      72 [0.00e+000 ~ 0.0%]
            Writes    :     163 [1.51e+002 ~ 1.3%]
        Spills        :    1416 bytes*
            Reads     :     345 [4.95e+002 ~ 4.3%]
            Writes    :     185 [9.29e+001 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: v_psi_5_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (v_psi_5_transform(double *, double *, int, int, double *)) [11] D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(194,106)
  -> INLINE: (196,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (202,9) S1_sum(const double *, double *, int)
  -> INLINE: (203,9) S2_sum(const double *, double *, int)
  -> INLINE: (204,9) S3_sum(const double *, double *, int)
  -> INLINE: (205,9) S4_sum(const double *, double *, int)
  -> INLINE: (206,9) S5_sum(const double *, double *, int)
  -> INLINE: (207,9) S6_sum(const double *, double *, int)
  -> INLINE: (208,9) S7_sum(const double *, double *, int)
  -> INLINE: (209,9) S8_sum(const double *, double *, int)
  -> INLINE: (210,9) S9_sum(const double *, double *, int)
  -> INLINE: (211,9) S10_sum(const double *, double *, int)
  -> INLINE: (212,9) S11_sum(const double *, double *, int)
  -> INLINE: (213,9) S12_sum(const double *, double *, int)
  -> INLINE: (214,9) S13_sum(const double *, double *, int)
  -> INLINE: (215,9) S14_sum(const double *, double *, int)
  -> INLINE: (216,9) S15_sum(const double *, double *, int)
  -> INLINE: (217,9) S16_sum(const double *, double *, int)
  -> INLINE: (218,9) S17_sum(const double *, double *, int)
  -> INLINE: (219,9) S18_sum(const double *, double *, int)
  -> INLINE: (220,9) S19_sum(const double *, double *, int)
  -> INLINE: (221,9) S20_sum(const double *, double *, int)
  -> INLINE: (228,5) S1_sum(const double *, double *, int)
  -> (229,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (231,5) S2_sum(const double *, double *, int)
  -> (232,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (234,5) S3_sum(const double *, double *, int)
  -> (235,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (237,5) S4_sum(const double *, double *, int)
  -> (238,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (240,5) S5_sum(const double *, double *, int)
  -> (241,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (243,5) S6_sum(const double *, double *, int)
  -> (244,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (246,5) S7_sum(const double *, double *, int)
  -> (247,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (249,5) S8_sum(const double *, double *, int)
  -> (250,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (252,5) S9_sum(const double *, double *, int)
  -> (253,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (255,5) S10_sum(const double *, double *, int)
  -> (256,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (258,5) S11_sum(const double *, double *, int)
  -> (259,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (261,5) S12_sum(const double *, double *, int)
  -> (262,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (264,5) S13_sum(const double *, double *, int)
  -> (265,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (267,5) S14_sum(const double *, double *, int)
  -> (268,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (270,5) S15_sum(const double *, double *, int)
  -> (271,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (273,5) S16_sum(const double *, double *, int)
  -> (274,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (276,5) S17_sum(const double *, double *, int)
  -> (277,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (279,5) S18_sum(const double *, double *, int)
  -> (280,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (282,5) S19_sum(const double *, double *, int)
  -> (283,5) v_psi_5_transform(double *, double *, int, int, double *)
  -> INLINE: (285,5) S20_sum(const double *, double *, int)
  -> (286,5) v_psi_5_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(228,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(231,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(234,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(237,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(240,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(243,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(246,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(249,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(252,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(255,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(258,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(261,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(264,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(267,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(270,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(273,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(276,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(279,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(282,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(285,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(202,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(203,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(204,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(205,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(206,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(207,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(208,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(209,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(210,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(211,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(212,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(213,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(214,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(215,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(216,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(217,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(218,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(219,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(220,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(221,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(228,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(228,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(228,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(231,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(231,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(231,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(234,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(234,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(234,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(237,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(237,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(237,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(240,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(240,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(240,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(243,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(243,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(243,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(246,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(246,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(246,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(249,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(249,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(249,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(252,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(252,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(252,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(255,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(255,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(255,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(258,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(258,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(258,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(261,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(261,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(261,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(264,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(264,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(264,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(267,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(267,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(267,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(270,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(270,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(270,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(273,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(273,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(273,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(276,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(276,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(276,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(279,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(279,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(279,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(282,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(282,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(282,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(285,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(285,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(285,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(202,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(202,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(202,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(203,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(203,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(203,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(204,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(204,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(204,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(205,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(205,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(205,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(206,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(206,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(206,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(207,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(207,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(207,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(208,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(208,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(208,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(209,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(209,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(209,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(210,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(210,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(210,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(211,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(211,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(211,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(212,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(212,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(212,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(213,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(213,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(213,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(214,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(214,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(214,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(215,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(215,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(215,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(216,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(216,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(216,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(217,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(217,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(217,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(218,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(218,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(218,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(219,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(219,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(219,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(220,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(220,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(220,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(221,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(221,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5) inlined into D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(221,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(188,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(179,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(170,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(152,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(194,106):remark #34051: REGISTER ALLOCATION : [?v_psi_5_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\v_psi_5_transform.cpp:194

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm8]
        
    Routine temporaries
        Total         :    4929
            Global    :    1648
            Local     :    3281
        Regenerable   :    1333
        Spilled       :     271
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :     160 [0.00e+000 ~ 0.0%]
            Writes    :     281 [3.07e+002 ~ 9.5%]
        Spills        :     944 bytes*
            Reads     :     129 [1.57e+001 ~ 0.5%]
            Writes    :     117 [4.07e+001 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: v_psi_4_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (v_psi_4_transform(double *, double *, int, int, double *)) [12] D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(167,106)
  -> INLINE: (169,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (175,9) S1_sum(const double *, double *, int)
  -> INLINE: (176,9) S2_sum(const double *, double *, int)
  -> INLINE: (177,9) S3_sum(const double *, double *, int)
  -> INLINE: (178,9) S4_sum(const double *, double *, int)
  -> INLINE: (179,9) S5_sum(const double *, double *, int)
  -> INLINE: (180,9) S6_sum(const double *, double *, int)
  -> INLINE: (181,9) S7_sum(const double *, double *, int)
  -> INLINE: (182,9) S8_sum(const double *, double *, int)
  -> INLINE: (183,9) S9_sum(const double *, double *, int)
  -> INLINE: (184,9) S10_sum(const double *, double *, int)
  -> INLINE: (185,9) S11_sum(const double *, double *, int)
  -> INLINE: (186,9) S12_sum(const double *, double *, int)
  -> INLINE: (187,9) S13_sum(const double *, double *, int)
  -> INLINE: (188,9) S14_sum(const double *, double *, int)
  -> INLINE: (189,9) S15_sum(const double *, double *, int)
  -> INLINE: (190,9) S16_sum(const double *, double *, int)
  -> INLINE: (191,9) S17_sum(const double *, double *, int)
  -> INLINE: (198,5) S1_sum(const double *, double *, int)
  -> (199,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (201,5) S2_sum(const double *, double *, int)
  -> (202,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (204,5) S3_sum(const double *, double *, int)
  -> (205,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (207,5) S4_sum(const double *, double *, int)
  -> (208,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (210,5) S5_sum(const double *, double *, int)
  -> (211,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (213,5) S6_sum(const double *, double *, int)
  -> (214,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (216,5) S7_sum(const double *, double *, int)
  -> (217,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (219,5) S8_sum(const double *, double *, int)
  -> (220,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (222,5) S9_sum(const double *, double *, int)
  -> (223,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (225,5) S10_sum(const double *, double *, int)
  -> (226,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (228,5) S11_sum(const double *, double *, int)
  -> (229,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (231,5) S12_sum(const double *, double *, int)
  -> (232,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (234,5) S13_sum(const double *, double *, int)
  -> (235,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (237,5) S14_sum(const double *, double *, int)
  -> (238,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (240,5) S15_sum(const double *, double *, int)
  -> (241,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (243,5) S16_sum(const double *, double *, int)
  -> (244,5) v_psi_4_transform(double *, double *, int, int, double *)
  -> INLINE: (246,5) S17_sum(const double *, double *, int)
  -> (247,5) v_psi_4_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(198,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(201,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(204,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(207,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(210,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(213,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(216,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(219,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(222,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(225,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(228,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(231,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(234,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(237,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(240,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(243,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(246,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(175,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(176,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(177,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(178,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(179,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(180,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(181,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(182,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(183,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(184,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(185,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(186,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(187,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(188,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(189,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(190,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(191,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(198,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(198,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(198,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(201,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(201,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(201,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(204,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(204,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(204,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(207,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(207,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(207,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(210,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(210,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(210,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(213,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(213,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(213,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(216,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(216,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(216,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(219,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(219,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(219,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(222,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(222,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(222,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(225,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(225,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(225,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(228,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(228,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(228,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(231,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(231,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(231,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(234,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(234,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(234,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(237,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(237,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(237,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(240,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(240,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(240,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(243,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(243,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(243,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(246,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(246,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(246,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(175,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(175,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(175,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(176,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(176,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(176,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(177,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(177,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(177,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(178,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(178,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(178,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(179,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(179,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(179,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(180,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(180,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(180,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(181,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(181,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(181,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(182,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(182,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(182,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(183,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(183,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(183,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(184,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(184,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(184,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(185,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(185,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(185,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(186,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(186,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(186,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(187,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(187,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(187,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(188,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(188,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(188,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(189,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(189,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(189,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(190,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(190,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(190,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(191,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(191,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(191,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(152,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(167,106):remark #34051: REGISTER ALLOCATION : [?v_psi_4_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\v_psi_4_transform.cpp:167

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm12]
        
    Routine temporaries
        Total         :    4215
            Global    :    1414
            Local     :    2801
        Regenerable   :    1135
        Spilled       :     231
        
    Routine stack
        Variables     :    1228 bytes*
            Reads     :     136 [0.00e+000 ~ 0.0%]
            Writes    :     239 [2.61e+002 ~ 9.3%]
        Spills        :     800 bytes*
            Reads     :     109 [1.36e+001 ~ 0.5%]
            Writes    :      99 [3.49e+001 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: v_psi_3_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (v_psi_3_transform(double *, double *, int, int, double *)) [13] D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(140,106)
  -> INLINE: (142,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (148,9) S1_sum(const double *, double *, int)
  -> INLINE: (149,9) S2_sum(const double *, double *, int)
  -> INLINE: (150,9) S3_sum(const double *, double *, int)
  -> INLINE: (151,9) S4_sum(const double *, double *, int)
  -> INLINE: (152,9) S5_sum(const double *, double *, int)
  -> INLINE: (153,9) S6_sum(const double *, double *, int)
  -> INLINE: (154,9) S7_sum(const double *, double *, int)
  -> INLINE: (155,9) S8_sum(const double *, double *, int)
  -> INLINE: (156,9) S9_sum(const double *, double *, int)
  -> INLINE: (157,9) S10_sum(const double *, double *, int)
  -> INLINE: (158,9) S11_sum(const double *, double *, int)
  -> INLINE: (159,9) S12_sum(const double *, double *, int)
  -> INLINE: (160,9) S13_sum(const double *, double *, int)
  -> INLINE: (161,9) S14_sum(const double *, double *, int)
  -> INLINE: (168,5) S1_sum(const double *, double *, int)
  -> (169,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (171,5) S2_sum(const double *, double *, int)
  -> (172,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (174,5) S3_sum(const double *, double *, int)
  -> (175,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (177,5) S4_sum(const double *, double *, int)
  -> (178,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (180,5) S5_sum(const double *, double *, int)
  -> (181,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (183,5) S6_sum(const double *, double *, int)
  -> (184,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (186,5) S7_sum(const double *, double *, int)
  -> (187,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (189,5) S8_sum(const double *, double *, int)
  -> (190,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (192,5) S9_sum(const double *, double *, int)
  -> (193,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (195,5) S10_sum(const double *, double *, int)
  -> (196,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (198,5) S11_sum(const double *, double *, int)
  -> (199,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (201,5) S12_sum(const double *, double *, int)
  -> (202,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (204,5) S13_sum(const double *, double *, int)
  -> (205,5) v_psi_3_transform(double *, double *, int, int, double *)
  -> INLINE: (207,5) S14_sum(const double *, double *, int)
  -> (208,5) v_psi_3_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(168,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(171,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(174,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(177,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(180,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(183,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(186,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(189,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(192,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(195,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(198,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(201,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(204,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(207,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(148,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(149,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(150,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(151,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(152,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(153,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(154,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(155,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(156,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(157,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(158,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(159,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(160,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(161,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(168,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(168,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(168,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(171,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(171,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(171,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(174,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(174,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(174,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(177,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(177,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(177,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(180,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(180,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(180,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(183,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(183,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(183,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(186,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(186,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(186,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(189,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(189,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(189,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(192,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(192,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(192,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(195,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(195,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(195,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(198,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(198,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(198,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(201,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(201,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(201,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(204,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(204,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(204,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(207,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(207,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(207,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(148,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(148,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(148,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(149,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(149,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(149,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(150,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(150,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(150,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(151,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(151,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(151,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(152,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(152,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(152,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(153,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(153,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(153,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(154,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(154,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(154,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(155,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(155,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(155,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(156,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(156,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(156,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(157,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(157,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(157,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(158,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(158,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(158,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(159,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(159,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(159,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(160,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(160,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(160,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(161,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(161,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(161,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(140,106):remark #34051: REGISTER ALLOCATION : [?v_psi_3_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\v_psi_3_transform.cpp:140

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm15]
        
    Routine temporaries
        Total         :    3569
            Global    :    1188
            Local     :    2381
        Regenerable   :     937
        Spilled       :     193
        
    Routine stack
        Variables     :    1012 bytes*
            Reads     :     112 [0.00e+000 ~ 0.0%]
            Writes    :     197 [2.15e+002 ~ 8.8%]
        Spills        :     888 bytes*
            Reads     :     122 [1.27e+001 ~ 0.5%]
            Writes    :     110 [3.94e+001 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: v_psi_2_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (v_psi_2_transform(double *, double *, int, int, double *)) [14] D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(113,106)
  -> INLINE: (115,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (121,9) S1_sum(const double *, double *, int)
  -> INLINE: (122,9) S2_sum(const double *, double *, int)
  -> INLINE: (123,9) S3_sum(const double *, double *, int)
  -> INLINE: (124,9) S4_sum(const double *, double *, int)
  -> INLINE: (125,9) S5_sum(const double *, double *, int)
  -> INLINE: (126,9) S6_sum(const double *, double *, int)
  -> INLINE: (127,9) S7_sum(const double *, double *, int)
  -> INLINE: (128,9) S8_sum(const double *, double *, int)
  -> INLINE: (129,9) S9_sum(const double *, double *, int)
  -> INLINE: (130,9) S10_sum(const double *, double *, int)
  -> INLINE: (131,9) S11_sum(const double *, double *, int)
  -> INLINE: (138,5) S1_sum(const double *, double *, int)
  -> (139,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (141,5) S2_sum(const double *, double *, int)
  -> (142,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (144,5) S3_sum(const double *, double *, int)
  -> (145,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (147,5) S4_sum(const double *, double *, int)
  -> (148,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (150,5) S5_sum(const double *, double *, int)
  -> (151,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (153,5) S6_sum(const double *, double *, int)
  -> (154,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (156,5) S7_sum(const double *, double *, int)
  -> (157,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (159,5) S8_sum(const double *, double *, int)
  -> (160,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (162,5) S9_sum(const double *, double *, int)
  -> (163,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (165,5) S10_sum(const double *, double *, int)
  -> (166,5) v_psi_2_transform(double *, double *, int, int, double *)
  -> INLINE: (168,5) S11_sum(const double *, double *, int)
  -> (169,5) v_psi_2_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(138,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(141,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(144,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(147,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(150,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(153,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(156,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(159,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(162,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(165,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(168,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(121,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(122,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(123,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(124,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(125,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(126,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(127,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(128,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(129,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(130,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(131,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(138,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(138,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(138,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(141,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(141,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(141,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(144,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(144,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(144,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(144,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(147,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(147,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(147,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(150,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(150,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(150,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(153,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(153,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(153,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(156,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(156,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(156,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(159,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(159,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(159,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(162,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(162,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(162,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(165,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(165,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(165,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(168,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(168,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(168,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(121,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(121,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(121,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(122,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(122,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(122,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(123,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(123,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(123,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(123,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(124,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(124,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(124,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(125,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(125,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(125,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(126,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(126,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(126,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(127,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(127,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(127,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(128,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(128,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(128,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(129,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(129,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(129,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(130,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(130,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(130,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(131,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(131,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(131,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(107,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(113,106):remark #34051: REGISTER ALLOCATION : [?v_psi_2_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\v_psi_2_transform.cpp:113

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm8]
        
    Routine temporaries
        Total         :    2800
            Global    :     926
            Local     :    1874
        Regenerable   :     733
        Spilled       :     152
        
    Routine stack
        Variables     :     796 bytes*
            Reads     :      88 [0.00e+000 ~ 0.0%]
            Writes    :     155 [1.69e+002 ~ 9.1%]
        Spills        :     872 bytes*
            Reads     :     121 [1.60e+001 ~ 0.9%]
            Writes    :     108 [3.90e+001 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: v_psi_1_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (v_psi_1_transform(double *, double *, int, int, double *)) [15] D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(104,106)
  -> INLINE: (106,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (112,9) S1_sum(const double *, double *, int)
  -> INLINE: (113,9) S2_sum(const double *, double *, int)
  -> INLINE: (114,9) S3_sum(const double *, double *, int)
  -> INLINE: (115,9) S4_sum(const double *, double *, int)
  -> INLINE: (116,9) S5_sum(const double *, double *, int)
  -> INLINE: (117,9) S6_sum(const double *, double *, int)
  -> INLINE: (118,9) S7_sum(const double *, double *, int)
  -> INLINE: (119,9) S8_sum(const double *, double *, int)
  -> INLINE: (120,9) S9_sum(const double *, double *, int)
  -> INLINE: (121,9) S10_sum(const double *, double *, int)
  -> INLINE: (128,5) S1_sum(const double *, double *, int)
  -> (129,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (131,5) S2_sum(const double *, double *, int)
  -> (132,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (134,5) S3_sum(const double *, double *, int)
  -> (135,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (137,5) S4_sum(const double *, double *, int)
  -> (138,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (140,5) S5_sum(const double *, double *, int)
  -> (141,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (143,5) S6_sum(const double *, double *, int)
  -> (144,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (146,5) S7_sum(const double *, double *, int)
  -> (147,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (149,5) S8_sum(const double *, double *, int)
  -> (150,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (152,5) S9_sum(const double *, double *, int)
  -> (153,5) v_psi_1_transform(double *, double *, int, int, double *)
  -> INLINE: (155,5) S10_sum(const double *, double *, int)
  -> (156,5) v_psi_1_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(128,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(131,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(134,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(137,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(140,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(143,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(146,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(149,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(152,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(155,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(112,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(113,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(114,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(115,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(116,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(117,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(118,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(119,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(120,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(121,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(128,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(128,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(128,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(131,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(131,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(131,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(134,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(134,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(134,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(137,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(137,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(137,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(140,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(140,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(140,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(143,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(143,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(143,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(146,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(146,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(146,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(149,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(149,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(149,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(149,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(152,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(152,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(152,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(155,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(155,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(155,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(112,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(112,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(112,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(113,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(113,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(113,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(114,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(114,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(114,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(115,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(115,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(115,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(116,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(116,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(116,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(117,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(117,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(117,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(118,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(118,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(118,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(119,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(119,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(119,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(119,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(120,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(120,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(120,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(121,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(121,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(121,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(104,106):remark #34051: REGISTER ALLOCATION : [?v_psi_1_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\v_psi_1_transform.cpp:104

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm13]
        
    Routine temporaries
        Total         :    2791
            Global    :     955
            Local     :    1836
        Regenerable   :     683
        Spilled       :     120
        
    Routine stack
        Variables     :     724 bytes*
            Reads     :      80 [0.00e+000 ~ 0.0%]
            Writes    :     141 [1.54e+002 ~ 6.2%]
        Spills        :     960 bytes*
            Reads     :     136 [1.11e+001 ~ 0.4%]
            Writes    :     119 [4.48e+001 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: v_psi_0_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (v_psi_0_transform(double *, double *, int, int, double *)) [16] D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(131,105)
  -> INLINE: (139,3) S1_sum(const double *, double *, int)
  -> INLINE: (140,3) S2_sum(const double *, double *, int)
  -> INLINE: (141,3) S3_sum(const double *, double *, int)
  -> INLINE: (142,3) S4_sum(const double *, double *, int)
  -> INLINE: (143,3) S5_sum(const double *, double *, int)
  -> INLINE: (144,3) S6_sum(const double *, double *, int)
  -> INLINE: (145,3) S7_sum(const double *, double *, int)
  -> INLINE: (146,3) S8_sum(const double *, double *, int)
  -> INLINE: (147,3) S9_sum(const double *, double *, int)
  -> INLINE: (154,2) S1_sum(const double *, double *, int)
  -> (155,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (157,2) S2_sum(const double *, double *, int)
  -> (158,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (160,2) S3_sum(const double *, double *, int)
  -> (161,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (163,2) S4_sum(const double *, double *, int)
  -> (164,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (166,2) S5_sum(const double *, double *, int)
  -> (167,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (169,2) S6_sum(const double *, double *, int)
  -> (170,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (172,2) S7_sum(const double *, double *, int)
  -> (173,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (175,2) S8_sum(const double *, double *, int)
  -> (176,2) v_psi_0_transform(double *, double *, int, int, double *)
  -> INLINE: (178,2) S9_sum(const double *, double *, int)
  -> (179,2) v_psi_0_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(19,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(154,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(32,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(157,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(160,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(58,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(163,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(71,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(166,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(169,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(97,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(172,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(110,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(175,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(123,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(178,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(19,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(139,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(32,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(140,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(45,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(141,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(58,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(142,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(71,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(143,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(84,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(144,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(97,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(145,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(110,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(146,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(123,1) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(147,3)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(21,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(154,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(154,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(154,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(154,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(154,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(34,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(157,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(157,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(157,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(157,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(157,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(47,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(160,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(160,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(160,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(160,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(160,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(60,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(163,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(163,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(163,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(163,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(163,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(73,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(166,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(166,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(166,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(166,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(166,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(86,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(169,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(169,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(169,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(169,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(169,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(99,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(172,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(172,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(172,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(172,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(172,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(112,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(175,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(175,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(175,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(175,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(175,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(125,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(178,2)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(178,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(178,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(178,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(178,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(21,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(139,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(139,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(139,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(139,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(22,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(139,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(34,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(140,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(140,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(140,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(140,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(35,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(140,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(47,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(141,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(141,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(141,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(141,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(48,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(141,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(60,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(142,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(142,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(142,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(142,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(61,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(142,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(73,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(143,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(143,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(143,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(143,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(74,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(143,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(86,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(144,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(144,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(144,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(144,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(87,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(144,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(99,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(145,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(145,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(145,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(145,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(100,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(145,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(112,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(146,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(146,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(146,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(146,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(113,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(146,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(125,2) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(147,3)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(147,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(147,3)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(147,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(126,3) inlined into D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(147,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(131,105):remark #34051: REGISTER ALLOCATION : [?v_psi_0_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\v_psi_0_transform.cpp:131

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    3430
            Global    :    1122
            Local     :    2308
        Regenerable   :     687
        Spilled       :     285
        
    Routine stack
        Variables     :     796 bytes*
            Reads     :      72 [0.00e+000 ~ 0.0%]
            Writes    :     163 [1.51e+002 ~ 1.4%]
        Spills        :    1208 bytes*
            Reads     :     303 [4.31e+002 ~ 4.0%]
            Writes    :     153 [5.95e+001 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: recursive_decomposed_bs(double *, double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (recursive_decomposed_bs(double *, double *, double *, int, int, double *)) [17] D:\Code\KS\matmul-implement\bs_recursive.cpp(672,120)
  -> INLINE: (675,9) mkl_multiplication(const double *, const double *, double *, int)
  -> INLINE: (675,9) sqrt<int, void>(int)
  -> INLINE: (683,5) S1_sum(const double *, double *, int)
  -> INLINE: (684,5) T1_sum(const double *, double *, int)
  -> INLINE: (685,2) reset_M(double *, int)
  -> (686,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (687,5) Q1_sum(double *, const double *, int)
  -> INLINE: (689,5) S2_sum(const double *, double *, int)
  -> INLINE: (690,5) T2_sum(const double *, double *, int)
  -> INLINE: (691,2) reset_M(double *, int)
  -> (692,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (693,5) Q2_sum(double *, const double *, int)
  -> INLINE: (695,5) S3_sum(const double *, double *, int)
  -> INLINE: (696,5) T3_sum(const double *, double *, int)
  -> INLINE: (697,2) reset_M(double *, int)
  -> (698,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (699,5) Q3_sum(double *, const double *, int)
  -> INLINE: (701,5) S4_sum(const double *, double *, int)
  -> INLINE: (702,5) T4_sum(const double *, double *, int)
  -> INLINE: (703,2) reset_M(double *, int)
  -> (704,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (705,5) Q4_sum(double *, const double *, int)
  -> INLINE: (707,5) S5_sum(const double *, double *, int)
  -> INLINE: (708,5) T5_sum(const double *, double *, int)
  -> INLINE: (709,2) reset_M(double *, int)
  -> (710,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (711,5) Q5_sum(double *, const double *, int)
  -> INLINE: (713,5) S6_sum(const double *, double *, int)
  -> INLINE: (714,5) T6_sum(const double *, double *, int)
  -> INLINE: (715,2) reset_M(double *, int)
  -> (716,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (717,5) Q6_sum(double *, const double *, int)
  -> INLINE: (719,5) S7_sum(const double *, double *, int)
  -> INLINE: (720,5) T7_sum(const double *, double *, int)
  -> INLINE: (721,2) reset_M(double *, int)
  -> (722,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (723,5) Q7_sum(double *, const double *, int)
  -> INLINE: (725,5) S8_sum(const double *, double *, int)
  -> INLINE: (726,5) T8_sum(const double *, double *, int)
  -> INLINE: (727,2) reset_M(double *, int)
  -> (728,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (729,5) Q8_sum(double *, const double *, int)
  -> INLINE: (731,5) S9_sum(const double *, double *, int)
  -> INLINE: (732,5) T9_sum(const double *, double *, int)
  -> INLINE: (733,2) reset_M(double *, int)
  -> (734,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (735,5) Q9_sum(double *, const double *, int)
  -> INLINE: (737,5) S10_sum(const double *, double *, int)
  -> INLINE: (738,5) T10_sum(const double *, double *, int)
  -> INLINE: (739,2) reset_M(double *, int)
  -> (740,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (741,5) Q10_sum(double *, const double *, int)
  -> INLINE: (743,5) S11_sum(const double *, double *, int)
  -> INLINE: (744,5) T11_sum(const double *, double *, int)
  -> INLINE: (745,2) reset_M(double *, int)
  -> (746,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (747,5) Q11_sum(double *, const double *, int)
  -> INLINE: (749,5) S12_sum(const double *, double *, int)
  -> INLINE: (750,5) T12_sum(const double *, double *, int)
  -> INLINE: (751,2) reset_M(double *, int)
  -> (752,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (753,5) Q12_sum(double *, const double *, int)
  -> INLINE: (755,5) S13_sum(const double *, double *, int)
  -> INLINE: (756,5) T13_sum(const double *, double *, int)
  -> INLINE: (757,2) reset_M(double *, int)
  -> (758,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (759,5) Q13_sum(double *, const double *, int)
  -> INLINE: (761,5) S14_sum(const double *, double *, int)
  -> INLINE: (762,5) T14_sum(const double *, double *, int)
  -> INLINE: (763,2) reset_M(double *, int)
  -> (764,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (765,5) Q14_sum(double *, const double *, int)
  -> INLINE: (767,5) S15_sum(const double *, double *, int)
  -> INLINE: (768,5) T15_sum(const double *, double *, int)
  -> INLINE: (769,2) reset_M(double *, int)
  -> (770,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (771,5) Q15_sum(double *, const double *, int)
  -> INLINE: (773,5) S16_sum(const double *, double *, int)
  -> INLINE: (774,5) T16_sum(const double *, double *, int)
  -> INLINE: (775,2) reset_M(double *, int)
  -> (776,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (777,5) Q16_sum(double *, const double *, int)
  -> INLINE: (779,5) S17_sum(const double *, double *, int)
  -> INLINE: (780,5) T17_sum(const double *, double *, int)
  -> INLINE: (781,2) reset_M(double *, int)
  -> (782,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (783,5) Q17_sum(double *, const double *, int)
  -> INLINE: (785,5) S18_sum(const double *, double *, int)
  -> INLINE: (786,5) T18_sum(const double *, double *, int)
  -> INLINE: (787,2) reset_M(double *, int)
  -> (788,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (789,5) Q18_sum(double *, const double *, int)
  -> INLINE: (791,5) S19_sum(const double *, double *, int)
  -> INLINE: (792,5) T19_sum(const double *, double *, int)
  -> INLINE: (793,2) reset_M(double *, int)
  -> (794,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (795,5) Q19_sum(double *, const double *, int)
  -> INLINE: (797,5) S20_sum(const double *, double *, int)
  -> INLINE: (798,5) T20_sum(const double *, double *, int)
  -> INLINE: (799,2) reset_M(double *, int)
  -> (800,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (801,5) Q20_sum(double *, const double *, int)
  -> INLINE: (803,5) S21_sum(const double *, double *, int)
  -> INLINE: (804,5) T21_sum(const double *, double *, int)
  -> INLINE: (805,2) reset_M(double *, int)
  -> (806,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (807,5) Q21_sum(double *, const double *, int)
  -> INLINE: (809,5) S22_sum(const double *, double *, int)
  -> INLINE: (810,5) T22_sum(const double *, double *, int)
  -> INLINE: (811,2) reset_M(double *, int)
  -> (812,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (813,5) Q22_sum(double *, const double *, int)
  -> INLINE: (815,5) S23_sum(const double *, double *, int)
  -> INLINE: (816,5) T23_sum(const double *, double *, int)
  -> INLINE: (817,2) reset_M(double *, int)
  -> (818,5) recursive_decomposed_bs(double *, double *, double *, int, int, double *)
  -> INLINE: (819,5) Q23_sum(double *, const double *, int)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(21,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(683,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(30,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(684,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(685,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(39,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(687,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(49,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(689,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(58,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(690,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(691,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(67,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(693,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(77,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(695,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(86,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(696,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(697,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(95,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(699,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(105,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(701,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(114,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(702,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(703,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(123,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(705,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(133,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(707,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(142,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(708,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(709,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(151,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(711,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(161,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(713,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(170,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(714,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(715,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(179,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(717,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(189,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(719,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(198,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(720,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(721,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(207,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(723,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(217,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(725,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(226,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(726,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(727,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(235,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(729,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(245,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(731,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(254,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(732,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(733,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(263,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(735,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(273,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(737,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(282,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(738,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(739,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(291,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(741,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(301,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(743,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(310,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(744,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(745,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(319,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(747,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(329,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(749,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(338,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(750,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(751,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(347,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(753,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(357,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(755,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(366,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(756,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(757,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(375,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(759,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(385,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(761,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(394,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(762,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(763,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(403,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(765,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(413,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(767,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(422,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(768,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(769,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(431,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(771,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(441,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(773,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(450,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(774,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(775,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(459,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(777,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(469,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(779,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(478,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(780,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(781,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(487,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(783,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(497,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(785,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(506,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(786,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(787,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(515,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(789,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(525,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(791,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(534,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(792,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(793,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(543,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(795,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(553,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(797,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(562,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(798,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(799,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(571,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(801,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(581,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(803,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(590,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(804,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(805,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(599,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(807,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(609,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(809,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(618,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(810,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(811,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(627,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(813,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(637,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(815,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(646,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(816,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(817,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\bs_recursive.cpp(655,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(819,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(21,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(683,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(21,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(683,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(21,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(683,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(30,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(684,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(30,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(684,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(30,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(684,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(685,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(685,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(685,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(39,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(687,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(39,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(687,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(39,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(687,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(49,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(689,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(49,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(689,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(49,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(689,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(58,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(690,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(58,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(690,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(58,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(690,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(691,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(691,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(691,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(67,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(693,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(67,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(693,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(67,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(693,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(77,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(695,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(77,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(695,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(77,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(695,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(86,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(696,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(86,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(696,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(86,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(696,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(697,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(697,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(697,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(95,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(699,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(95,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(699,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(95,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(699,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(105,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(701,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(105,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(701,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(105,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(701,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(114,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(702,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(114,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(702,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(114,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(702,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(703,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(703,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(703,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(123,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(705,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(123,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(705,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(123,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(705,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(133,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(707,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(133,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(707,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(133,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(707,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(142,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(708,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(142,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(708,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(142,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(708,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(709,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(709,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(709,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(151,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(711,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(151,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(711,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(151,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(711,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(161,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(713,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(161,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(713,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(161,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(713,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(170,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(714,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(170,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(714,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(170,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(714,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(715,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(715,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(715,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(179,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(717,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(179,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(717,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(179,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(717,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(189,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(719,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(189,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(719,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(189,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(719,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(198,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(720,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(198,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(720,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(198,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(720,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(721,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(721,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(721,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(207,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(723,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(207,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(723,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(207,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(723,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(217,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(725,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(217,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(725,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(217,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(725,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(226,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(726,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(226,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(726,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(226,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(726,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(727,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(727,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(727,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(235,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(729,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(235,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(729,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(235,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(729,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(245,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(731,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(245,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(731,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(245,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(731,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(254,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(732,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(254,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(732,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(254,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(732,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(733,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(733,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(733,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(263,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(735,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(263,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(735,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(263,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(735,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(273,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(737,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(273,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(737,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(273,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(737,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(282,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(738,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(282,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(738,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(282,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(738,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(739,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(739,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(739,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(291,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(741,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(291,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(741,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(291,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(741,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(301,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(743,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(301,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(743,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(301,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(743,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(310,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(744,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(310,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(744,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(310,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(744,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(745,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(745,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(745,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(319,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(747,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(319,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(747,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(319,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(747,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(329,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(749,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(329,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(749,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(329,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(749,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(338,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(750,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(338,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(750,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(338,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(750,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(751,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(751,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(751,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(347,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(753,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(347,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(753,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(347,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(753,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(357,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(755,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(357,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(755,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(357,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(755,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(366,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(756,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(366,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(756,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(366,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(756,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(757,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(757,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(757,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(375,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(759,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(375,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(759,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(375,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(759,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(385,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(761,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(385,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(761,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(385,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(761,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(394,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(762,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(394,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(762,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(394,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(762,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(763,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(763,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(763,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(403,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(765,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(403,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(765,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(403,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(765,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(413,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(767,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(413,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(767,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(413,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(767,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(422,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(768,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(422,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(768,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(422,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(768,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(769,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(769,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(769,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(431,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(771,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(431,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(771,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(431,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(771,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(441,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(773,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(441,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(773,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(441,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(773,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(450,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(774,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(450,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(774,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(450,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(774,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(775,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(775,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(775,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(459,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(777,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(459,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(777,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(459,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(777,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(469,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(779,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(469,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(779,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(469,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(779,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(478,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(780,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(478,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(780,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(478,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(780,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(781,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(781,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(781,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(487,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(783,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(487,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(783,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(487,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(783,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(497,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(785,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(497,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(785,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(497,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(785,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(506,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(786,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(506,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(786,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(506,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(786,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(787,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(787,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(787,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(515,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(789,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(515,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(789,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(515,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(789,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(525,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(791,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(525,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(791,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(525,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(791,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(534,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(792,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(534,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(792,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(534,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(792,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(793,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(793,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(793,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(543,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(795,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(543,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(795,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(543,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(795,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(553,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(797,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(553,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(797,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(553,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(797,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(562,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(798,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(562,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(798,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(562,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(798,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(799,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(799,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(799,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(571,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(801,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(571,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(801,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(571,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(801,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(581,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(803,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(581,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(803,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(581,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(803,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(590,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(804,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(590,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(804,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(590,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(804,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(805,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(805,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(805,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(599,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(807,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(599,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(807,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(599,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(807,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(609,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(809,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(609,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(809,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(609,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(809,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(618,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(810,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(618,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(810,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(618,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(810,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(811,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(811,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(811,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(627,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(813,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(627,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(813,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(627,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(813,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(637,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(815,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(637,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(815,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(637,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(815,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(646,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(816,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(646,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(816,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(646,5) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(816,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(817,2)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(817,2)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(817,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(655,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(819,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(655,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(819,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\bs_recursive.cpp(655,9) inlined into D:\Code\KS\matmul-implement\bs_recursive.cpp(819,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(646,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(637,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(618,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(609,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(590,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(581,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(562,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(553,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(534,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(525,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(506,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(497,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(478,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(469,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(450,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(441,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(422,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(413,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(394,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(385,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(366,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(357,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(338,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(329,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(310,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(282,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(273,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(254,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(226,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(217,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(198,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(189,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(170,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(142,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(133,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(114,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(105,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(86,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(77,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(58,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(665,1):remark #34026: call to memset implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(21,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\bs_recursive.cpp(672,120):remark #34051: REGISTER ALLOCATION : [?recursive_decomposed_bs@@YAXPEAN00HH0@Z] D:\Code\KS\matmul-implement\bs_recursive.cpp:672

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :   10510
            Global    :    3758
            Local     :    6752
        Regenerable   :    3047
        Spilled       :     546
        
    Routine stack
        Variables     :    3132 bytes*
            Reads     :     368 [0.00e+000 ~ 0.0%]
            Writes    :     622 [1.99e+003 ~ 9.2%]
        Spills        :    3688 bytes*
            Reads     :     509 [1.85e+002 ~ 0.9%]
            Writes    :     461 [4.23e+002 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: w_tau_0_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (w_tau_0_transform(double *, double *, int, int, double *)) [18] D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(95,106)
  -> INLINE: (97,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (103,9) S1_sum(const double *, double *, int)
  -> INLINE: (104,9) S2_sum(const double *, double *, int)
  -> INLINE: (105,9) S3_sum(const double *, double *, int)
  -> INLINE: (106,9) S4_sum(const double *, double *, int)
  -> INLINE: (107,9) S5_sum(const double *, double *, int)
  -> INLINE: (108,9) S6_sum(const double *, double *, int)
  -> INLINE: (109,9) S7_sum(const double *, double *, int)
  -> INLINE: (110,9) S8_sum(const double *, double *, int)
  -> INLINE: (111,9) S9_sum(const double *, double *, int)
  -> INLINE: (118,5) S1_sum(const double *, double *, int)
  -> (119,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (119,83) S2_sum(const double *, double *, int)
  -> (120,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (122,5) S3_sum(const double *, double *, int)
  -> (123,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (125,5) S4_sum(const double *, double *, int)
  -> (126,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (128,5) S5_sum(const double *, double *, int)
  -> (129,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (131,5) S6_sum(const double *, double *, int)
  -> (132,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (134,5) S7_sum(const double *, double *, int)
  -> (135,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (137,5) S8_sum(const double *, double *, int)
  -> (138,5) w_tau_0_transform(double *, double *, int, int, double *)
  -> INLINE: (140,5) S9_sum(const double *, double *, int)
  -> (141,5) w_tau_0_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(118,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(119,83)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(122,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(125,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(128,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(131,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(134,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(137,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(140,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(103,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(104,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(105,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(106,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(107,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(108,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(109,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(110,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(111,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(118,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(118,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(118,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(119,83)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(119,83)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(119,83)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(122,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(122,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(122,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(125,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(125,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(125,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(128,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(128,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(128,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(131,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(131,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(131,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(134,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(134,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(134,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(137,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(137,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(137,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(140,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(140,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(140,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(103,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(103,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(103,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(104,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(104,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(104,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(105,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(105,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(105,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(106,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(106,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(106,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(107,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(107,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(107,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(108,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(108,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(108,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(109,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(109,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(109,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(110,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(110,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(110,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(111,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(111,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(111,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(95,106):remark #34051: REGISTER ALLOCATION : [?w_tau_0_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\w_tau_0_transform.cpp:95

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm9]
        
    Routine temporaries
        Total         :    2627
            Global    :     884
            Local     :    1743
        Regenerable   :     616
        Spilled       :     122
        
    Routine stack
        Variables     :     652 bytes*
            Reads     :      72 [0.00e+000 ~ 0.0%]
            Writes    :     127 [1.39e+002 ~ 6.0%]
        Spills        :     976 bytes*
            Reads     :     137 [9.57e+000 ~ 0.4%]
            Writes    :     121 [4.56e+001 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: w_tau_1_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (w_tau_1_transform(double *, double *, int, int, double *)) [19] D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(95,106)
  -> INLINE: (97,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (103,9) S1_sum(const double *, double *, int)
  -> INLINE: (104,9) S2_sum(const double *, double *, int)
  -> INLINE: (105,9) S3_sum(const double *, double *, int)
  -> INLINE: (106,9) S4_sum(const double *, double *, int)
  -> INLINE: (107,9) S5_sum(const double *, double *, int)
  -> INLINE: (108,9) S6_sum(const double *, double *, int)
  -> INLINE: (109,9) S7_sum(const double *, double *, int)
  -> INLINE: (110,9) S8_sum(const double *, double *, int)
  -> INLINE: (111,9) S9_sum(const double *, double *, int)
  -> INLINE: (118,5) S1_sum(const double *, double *, int)
  -> (119,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (119,83) S2_sum(const double *, double *, int)
  -> (120,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (122,5) S3_sum(const double *, double *, int)
  -> (123,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (125,5) S4_sum(const double *, double *, int)
  -> (126,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (128,5) S5_sum(const double *, double *, int)
  -> (129,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (131,5) S6_sum(const double *, double *, int)
  -> (132,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (134,5) S7_sum(const double *, double *, int)
  -> (135,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (137,5) S8_sum(const double *, double *, int)
  -> (138,5) w_tau_1_transform(double *, double *, int, int, double *)
  -> INLINE: (140,5) S9_sum(const double *, double *, int)
  -> (141,5) w_tau_1_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(118,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(119,83)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(122,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(125,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(128,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(131,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(134,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(137,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(140,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(103,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(104,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(105,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(106,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(107,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(108,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(109,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(110,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(111,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(118,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(118,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(118,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(119,83)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(119,83)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(119,83)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(122,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(122,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(122,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(125,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(125,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(125,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(128,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(128,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(128,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(131,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(131,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(131,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(134,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(134,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(134,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(137,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(137,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(137,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(140,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(140,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(140,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(103,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(103,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(103,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(104,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(104,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(104,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(105,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(105,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(105,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(106,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(106,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(106,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(107,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(107,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(107,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(108,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(108,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(108,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(109,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(109,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(109,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(110,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(110,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(110,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(111,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(111,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(111,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(35,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(95,106):remark #34051: REGISTER ALLOCATION : [?w_tau_1_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\w_tau_1_transform.cpp:95

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm8]
        
    Routine temporaries
        Total         :    2430
            Global    :     837
            Local     :    1593
        Regenerable   :     615
        Spilled       :     116
        
    Routine stack
        Variables     :     652 bytes*
            Reads     :      72 [0.00e+000 ~ 0.0%]
            Writes    :     127 [1.39e+002 ~ 6.7%]
        Spills        :     784 bytes*
            Reads     :     111 [1.10e+001 ~ 0.5%]
            Writes    :      97 [3.66e+001 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: w_tau_2_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (w_tau_2_transform(double *, double *, int, int, double *)) [20] D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(104,106)
  -> INLINE: (106,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (112,9) S1_sum(const double *, double *, int)
  -> INLINE: (113,9) S2_sum(const double *, double *, int)
  -> INLINE: (114,9) S3_sum(const double *, double *, int)
  -> INLINE: (115,9) S4_sum(const double *, double *, int)
  -> INLINE: (116,9) S5_sum(const double *, double *, int)
  -> INLINE: (117,9) S6_sum(const double *, double *, int)
  -> INLINE: (118,9) S7_sum(const double *, double *, int)
  -> INLINE: (119,9) S8_sum(const double *, double *, int)
  -> INLINE: (120,9) S9_sum(const double *, double *, int)
  -> INLINE: (121,9) S10_sum(const double *, double *, int)
  -> INLINE: (128,5) S1_sum(const double *, double *, int)
  -> (129,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (129,83) S2_sum(const double *, double *, int)
  -> (130,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (132,5) S3_sum(const double *, double *, int)
  -> (133,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (135,5) S4_sum(const double *, double *, int)
  -> (136,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (138,5) S5_sum(const double *, double *, int)
  -> (139,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (141,5) S6_sum(const double *, double *, int)
  -> (142,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (144,5) S7_sum(const double *, double *, int)
  -> (145,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (147,5) S8_sum(const double *, double *, int)
  -> (148,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (150,5) S9_sum(const double *, double *, int)
  -> (151,5) w_tau_2_transform(double *, double *, int, int, double *)
  -> INLINE: (153,5) S10_sum(const double *, double *, int)
  -> (154,5) w_tau_2_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(128,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(129,83)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(132,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(135,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(138,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(141,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(144,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(147,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(150,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(153,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(112,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(113,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(114,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(115,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(116,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(117,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(118,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(119,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(120,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(121,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(128,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(128,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(128,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(129,83)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(129,83)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(129,83)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(132,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(132,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(132,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(135,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(135,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(135,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(138,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(138,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(138,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(141,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(141,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(141,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(144,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(144,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(144,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(147,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(147,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(147,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(150,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(150,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(150,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(153,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(153,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(153,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(112,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(112,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(112,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(113,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(113,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(113,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(114,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(114,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(114,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(115,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(115,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(115,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(116,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(116,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(116,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(117,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(117,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(117,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(118,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(118,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(118,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(119,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(119,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(119,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(120,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(120,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(120,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(121,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(121,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(121,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(35,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(104,106):remark #34051: REGISTER ALLOCATION : [?w_tau_2_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\w_tau_2_transform.cpp:104

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm13]
        
    Routine temporaries
        Total         :    2557
            Global    :     877
            Local     :    1680
        Regenerable   :     675
        Spilled       :     136
        
    Routine stack
        Variables     :     724 bytes*
            Reads     :      80 [0.00e+000 ~ 0.0%]
            Writes    :     141 [1.54e+002 ~ 8.1%]
        Spills        :     776 bytes*
            Reads     :     108 [1.18e+001 ~ 0.6%]
            Writes    :      96 [3.54e+001 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: w_tau_3_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (w_tau_3_transform(double *, double *, int, int, double *)) [21] D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(113,106)
  -> INLINE: (115,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (121,9) S1_sum(const double *, double *, int)
  -> INLINE: (122,9) S2_sum(const double *, double *, int)
  -> INLINE: (123,9) S3_sum(const double *, double *, int)
  -> INLINE: (124,9) S4_sum(const double *, double *, int)
  -> INLINE: (125,9) S5_sum(const double *, double *, int)
  -> INLINE: (126,9) S6_sum(const double *, double *, int)
  -> INLINE: (127,9) S7_sum(const double *, double *, int)
  -> INLINE: (128,9) S8_sum(const double *, double *, int)
  -> INLINE: (129,9) S9_sum(const double *, double *, int)
  -> INLINE: (130,9) S10_sum(const double *, double *, int)
  -> INLINE: (131,9) S11_sum(const double *, double *, int)
  -> INLINE: (138,5) S1_sum(const double *, double *, int)
  -> (139,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (139,83) S2_sum(const double *, double *, int)
  -> (140,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (142,5) S3_sum(const double *, double *, int)
  -> (143,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (145,5) S4_sum(const double *, double *, int)
  -> (146,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (148,5) S5_sum(const double *, double *, int)
  -> (149,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (151,5) S6_sum(const double *, double *, int)
  -> (152,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (154,5) S7_sum(const double *, double *, int)
  -> (155,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (157,5) S8_sum(const double *, double *, int)
  -> (158,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (160,5) S9_sum(const double *, double *, int)
  -> (161,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (163,5) S10_sum(const double *, double *, int)
  -> (164,5) w_tau_3_transform(double *, double *, int, int, double *)
  -> INLINE: (166,5) S11_sum(const double *, double *, int)
  -> (167,5) w_tau_3_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(138,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(139,83)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(142,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(145,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(148,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(151,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(154,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(157,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(160,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(163,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(166,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(121,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(122,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(123,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(124,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(125,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(126,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(127,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(128,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(129,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(130,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(131,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(138,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(138,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(138,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(139,83)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(139,83)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(139,83)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(142,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(142,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(142,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(145,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(145,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(145,5)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(145,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(148,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(148,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(148,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(151,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(151,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(151,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(154,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(154,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(154,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(157,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(157,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(157,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(160,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(160,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(160,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(163,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(163,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(163,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(166,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(166,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(166,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(121,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(121,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(121,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(122,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(122,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(122,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(123,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(123,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(123,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(124,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(124,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(124,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(124,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(125,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(125,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(125,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(126,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(126,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(126,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(127,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(127,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(127,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(128,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(128,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(128,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(129,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(129,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(129,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(130,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(130,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(130,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(131,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(131,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(131,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(98,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(113,106):remark #34051: REGISTER ALLOCATION : [?w_tau_3_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\w_tau_3_transform.cpp:113

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm7]
        
    Routine temporaries
        Total         :    3011
            Global    :    1017
            Local     :    1994
        Regenerable   :     743
        Spilled       :     155
        
    Routine stack
        Variables     :     796 bytes*
            Reads     :      88 [0.00e+000 ~ 0.0%]
            Writes    :     155 [1.69e+002 ~ 7.1%]
        Spills        :     688 bytes*
            Reads     :      95 [1.02e+001 ~ 0.4%]
            Writes    :      85 [3.12e+001 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: w_tau_4_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (w_tau_4_transform(double *, double *, int, int, double *)) [22] D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(140,106)
  -> INLINE: (142,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (148,9) S1_sum(const double *, double *, int)
  -> INLINE: (149,9) S2_sum(const double *, double *, int)
  -> INLINE: (150,9) S3_sum(const double *, double *, int)
  -> INLINE: (151,9) S4_sum(const double *, double *, int)
  -> INLINE: (152,9) S5_sum(const double *, double *, int)
  -> INLINE: (153,9) S6_sum(const double *, double *, int)
  -> INLINE: (154,9) S7_sum(const double *, double *, int)
  -> INLINE: (155,9) S8_sum(const double *, double *, int)
  -> INLINE: (156,9) S9_sum(const double *, double *, int)
  -> INLINE: (157,9) S10_sum(const double *, double *, int)
  -> INLINE: (158,9) S11_sum(const double *, double *, int)
  -> INLINE: (159,9) S12_sum(const double *, double *, int)
  -> INLINE: (160,9) S13_sum(const double *, double *, int)
  -> INLINE: (161,9) S14_sum(const double *, double *, int)
  -> INLINE: (168,5) S1_sum(const double *, double *, int)
  -> (169,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (169,83) S2_sum(const double *, double *, int)
  -> (170,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (172,5) S3_sum(const double *, double *, int)
  -> (173,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (175,5) S4_sum(const double *, double *, int)
  -> (176,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (178,5) S5_sum(const double *, double *, int)
  -> (179,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (181,5) S6_sum(const double *, double *, int)
  -> (182,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (184,5) S7_sum(const double *, double *, int)
  -> (185,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (187,5) S8_sum(const double *, double *, int)
  -> (188,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (190,5) S9_sum(const double *, double *, int)
  -> (191,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (193,5) S10_sum(const double *, double *, int)
  -> (194,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (196,5) S11_sum(const double *, double *, int)
  -> (197,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (199,5) S12_sum(const double *, double *, int)
  -> (200,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (202,5) S13_sum(const double *, double *, int)
  -> (203,5) w_tau_4_transform(double *, double *, int, int, double *)
  -> INLINE: (205,5) S14_sum(const double *, double *, int)
  -> (206,5) w_tau_4_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(168,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(169,83)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(172,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(175,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(178,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(181,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(184,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(187,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(190,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(193,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(196,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(199,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(202,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(205,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(148,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(149,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(150,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(151,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(152,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(153,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(154,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(155,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(156,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(157,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(158,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(159,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(160,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(161,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(168,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(168,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(168,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(169,83)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(169,83)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(169,83)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(172,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(172,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(172,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(175,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(175,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(175,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(178,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(178,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(178,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(181,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(181,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(181,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(184,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(184,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(184,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(187,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(187,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(187,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(190,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(190,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(190,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(193,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(193,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(193,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(196,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(196,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(196,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(199,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(199,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(199,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(202,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(202,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(202,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(205,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(205,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(205,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(148,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(148,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(148,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(149,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(149,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(149,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(150,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(150,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(150,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(151,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(151,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(151,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(152,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(152,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(152,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(153,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(153,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(153,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(154,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(154,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(154,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(155,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(155,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(155,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(156,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(156,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(156,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(157,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(157,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(157,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(158,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(158,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(158,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(159,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(159,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(159,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(160,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(160,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(160,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(161,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(161,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(161,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(80,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(44,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(17,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(140,106):remark #34051: REGISTER ALLOCATION : [?w_tau_4_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\w_tau_4_transform.cpp:140

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm8]
        
    Routine temporaries
        Total         :    3613
            Global    :    1216
            Local     :    2397
        Regenerable   :     941
        Spilled       :     195
        
    Routine stack
        Variables     :    1012 bytes*
            Reads     :     112 [0.00e+000 ~ 0.0%]
            Writes    :     197 [2.15e+002 ~ 8.2%]
        Spills        :     464 bytes*
            Reads     :      65 [9.50e+000 ~ 0.4%]
            Writes    :      57 [2.05e+001 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: w_tau_5_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (w_tau_5_transform(double *, double *, int, int, double *)) [23] D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(167,106)
  -> INLINE: (169,26) transformed_block_size(int, int)
    -> INLINE: (8,25) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
    -> INLINE: (9,15) pow<int, int, void>(int, int)
       {{ Inlining of routines from system headers is omitted. Use -Qopt-report:3 to view full report. }}
  -> INLINE: (175,9) S1_sum(const double *, double *, int)
  -> INLINE: (176,9) S2_sum(const double *, double *, int)
  -> INLINE: (177,9) S3_sum(const double *, double *, int)
  -> INLINE: (178,9) S4_sum(const double *, double *, int)
  -> INLINE: (179,9) S5_sum(const double *, double *, int)
  -> INLINE: (180,9) S6_sum(const double *, double *, int)
  -> INLINE: (181,9) S7_sum(const double *, double *, int)
  -> INLINE: (182,9) S8_sum(const double *, double *, int)
  -> INLINE: (183,9) S9_sum(const double *, double *, int)
  -> INLINE: (184,9) S10_sum(const double *, double *, int)
  -> INLINE: (185,9) S11_sum(const double *, double *, int)
  -> INLINE: (186,9) S12_sum(const double *, double *, int)
  -> INLINE: (187,9) S13_sum(const double *, double *, int)
  -> INLINE: (188,9) S14_sum(const double *, double *, int)
  -> INLINE: (189,9) S15_sum(const double *, double *, int)
  -> INLINE: (190,9) S16_sum(const double *, double *, int)
  -> INLINE: (191,9) S17_sum(const double *, double *, int)
  -> INLINE: (198,5) S1_sum(const double *, double *, int)
  -> (199,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (199,83) S2_sum(const double *, double *, int)
  -> (200,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (202,5) S3_sum(const double *, double *, int)
  -> (203,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (205,5) S4_sum(const double *, double *, int)
  -> (206,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (208,5) S5_sum(const double *, double *, int)
  -> (209,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (211,5) S6_sum(const double *, double *, int)
  -> (212,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (214,5) S7_sum(const double *, double *, int)
  -> (215,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (217,5) S8_sum(const double *, double *, int)
  -> (218,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (220,5) S9_sum(const double *, double *, int)
  -> (221,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (223,5) S10_sum(const double *, double *, int)
  -> (224,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (226,5) S11_sum(const double *, double *, int)
  -> (227,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (229,5) S12_sum(const double *, double *, int)
  -> (230,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (232,5) S13_sum(const double *, double *, int)
  -> (233,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (235,5) S14_sum(const double *, double *, int)
  -> (236,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (238,5) S15_sum(const double *, double *, int)
  -> (239,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (241,5) S16_sum(const double *, double *, int)
  -> (242,5) w_tau_5_transform(double *, double *, int, int, double *)
  -> INLINE: (244,5) S17_sum(const double *, double *, int)
  -> (245,5) w_tau_5_transform(double *, double *, int, int, double *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(198,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(199,83)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(202,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(205,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(208,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(211,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(214,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(217,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(220,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(223,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(226,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(229,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(232,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(235,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(238,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(241,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(244,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(175,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(176,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(177,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(178,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(179,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(180,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(181,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(182,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(183,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(184,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(185,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(186,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(187,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(188,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(189,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(190,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(191,9)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(198,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(198,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(198,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(199,83)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(199,83)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(199,83)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(202,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(202,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(202,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(205,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(205,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(205,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(208,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(208,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(208,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(211,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(211,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(211,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(214,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(214,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(214,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(217,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(217,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(217,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(220,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(220,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(220,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(223,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(223,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(223,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(226,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(226,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(226,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(229,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(229,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(229,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(232,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(232,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(232,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(235,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(235,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(235,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(238,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(238,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(238,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(241,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(241,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(241,5)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(244,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(244,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(244,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(175,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(175,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(17,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(175,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(176,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(176,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(176,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(177,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(177,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(177,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(178,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(178,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(44,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(178,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(179,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(179,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(179,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(180,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(180,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(180,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(181,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(181,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(181,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(182,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(182,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(80,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(182,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(183,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(183,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(183,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(184,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(184,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(98,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(184,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(185,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(185,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(107,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(185,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(186,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(186,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(186,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(187,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(187,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(187,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(188,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(188,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(188,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(189,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(189,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(189,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(190,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(190,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(152,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(190,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
LOOP END

LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(191,9)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(191,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or /Qvec-threshold0 to override
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5) inlined into D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(191,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(134,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(125,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(116,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(89,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(71,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(62,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(53,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(35,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(26,5):remark #34026: call to memcpy implemented as a call to optimized library version
D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(167,106):remark #34051: REGISTER ALLOCATION : [?w_tau_5_transform@@YAXPEAN0HH0@Z] D:\Code\KS\matmul-implement\w_tau_5_transform.cpp:167

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm5 zmm14]
        
    Routine temporaries
        Total         :    4320
            Global    :    1463
            Local     :    2857
        Regenerable   :    1141
        Spilled       :     236
        
    Routine stack
        Variables     :    1228 bytes*
            Reads     :     136 [0.00e+000 ~ 0.0%]
            Writes    :     239 [2.61e+002 ~ 8.4%]
        Spills        :     816 bytes*
            Reads     :     111 [1.36e+001 ~ 0.4%]
            Writes    :     101 [3.56e+001 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::exception::~exception(std::exception *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_Gexception@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      20
            Local     :       8
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::exception::exception(std::exception *, const std::exception &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34051: REGISTER ALLOCATION : [??0exception@std@@QEAA@AEBV01@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h:68

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rbp r8 zmm0]
        
    Routine temporaries
        Total         :      29
            Global    :      21
            Local     :       8
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::exception::what(const std::exception *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(90,5):remark #34051: REGISTER ALLOCATION : [?what@exception@std@@UEBAPEBDXZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h:90

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    3[ rax rdx rcx]
        
    Routine temporaries
        Total         :      24
            Global    :       0
            Local     :      24
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::assign(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(333,9):remark #34008: call to memmove not inlined based on compiler heuristics
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34026: call to memcpy implemented as a call to optimized library version
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(2684,113):remark #34051: REGISTER ALLOCATION : [?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring:2684

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :   11[ rax rdx rcx rbp rsi rdi r8-r9 r12-r14]
        
    Routine temporaries
        Total         :      59
            Global    :      36
            Local     :      23
        Regenerable   :       4
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ctype<char>::~ctype(std::ctype<char> *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_G?$ctype@D@std@@MEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      35
            Global    :      20
            Local     :      15
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::bad_cast::~bad_cast(std::bad_cast *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_Gbad_cast@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      20
            Local     :       8
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::bad_cast::~bad_cast(std::bad_cast *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_typeinfo.h(124,7):remark #34051: REGISTER ALLOCATION : [??1bad_cast@std@@UEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_typeinfo.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    2[ rax rcx]
        
    Routine temporaries
        Total         :      23
            Global    :      18
            Local     :       5
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::bad_cast::bad_cast(std::bad_cast *, const std::bad_cast &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_typeinfo.h(124,7):remark #34051: REGISTER ALLOCATION : [??0bad_cast@std@@QEAA@AEBV01@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_typeinfo.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx r8 zmm0]
        
    Routine temporaries
        Total         :      31
            Global    :      20
            Local     :      11
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mkl_multiplication(const double *, const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mkl_multiplication(const double *, const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(6,95)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(19,70)

===========================================================================

Begin optimization report for: T1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(28,70)

===========================================================================

Begin optimization report for: Q1_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q1_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(37,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(47,70)

===========================================================================

Begin optimization report for: T2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(56,70)

===========================================================================

Begin optimization report for: Q2_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q2_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(65,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(75,70)

===========================================================================

Begin optimization report for: T3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(84,70)

===========================================================================

Begin optimization report for: Q3_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q3_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(93,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(103,70)

===========================================================================

Begin optimization report for: T4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(112,70)

===========================================================================

Begin optimization report for: Q4_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q4_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(121,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(131,70)

===========================================================================

Begin optimization report for: T5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(140,70)

===========================================================================

Begin optimization report for: Q5_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q5_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(149,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(159,70)

===========================================================================

Begin optimization report for: T6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(168,70)

===========================================================================

Begin optimization report for: Q6_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q6_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(177,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(187,70)

===========================================================================

Begin optimization report for: T7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(196,70)

===========================================================================

Begin optimization report for: Q7_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q7_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(205,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(215,70)

===========================================================================

Begin optimization report for: T8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(224,70)

===========================================================================

Begin optimization report for: Q8_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q8_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(233,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(243,70)

===========================================================================

Begin optimization report for: T9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(252,70)

===========================================================================

Begin optimization report for: Q9_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q9_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(261,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(271,72)

===========================================================================

Begin optimization report for: T10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(280,72)

===========================================================================

Begin optimization report for: Q10_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q10_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(289,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(299,72)

===========================================================================

Begin optimization report for: T11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(308,72)

===========================================================================

Begin optimization report for: Q11_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q11_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(317,72)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(327,72)

===========================================================================

Begin optimization report for: T12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(336,72)

===========================================================================

Begin optimization report for: Q12_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q12_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(345,72)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(355,72)

===========================================================================

Begin optimization report for: T13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(364,72)

===========================================================================

Begin optimization report for: Q13_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q13_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(373,72)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(383,72)

===========================================================================

Begin optimization report for: T14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(392,72)

===========================================================================

Begin optimization report for: Q14_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q14_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(401,72)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(411,72)

===========================================================================

Begin optimization report for: T15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(420,72)

===========================================================================

Begin optimization report for: Q15_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q15_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(429,72)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(439,72)

===========================================================================

Begin optimization report for: T16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(448,72)

===========================================================================

Begin optimization report for: Q16_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q16_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(457,72)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(467,72)

===========================================================================

Begin optimization report for: T17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(476,72)

===========================================================================

Begin optimization report for: Q17_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q17_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(485,72)

===========================================================================

Begin optimization report for: S18_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S18_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(495,72)

===========================================================================

Begin optimization report for: T18_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T18_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(504,72)

===========================================================================

Begin optimization report for: Q18_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q18_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(513,72)

===========================================================================

Begin optimization report for: S19_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S19_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(523,72)

===========================================================================

Begin optimization report for: T19_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T19_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(532,72)

===========================================================================

Begin optimization report for: Q19_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q19_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(541,72)

===========================================================================

Begin optimization report for: S20_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S20_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(551,72)

===========================================================================

Begin optimization report for: T20_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T20_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(560,72)

===========================================================================

Begin optimization report for: Q20_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q20_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(569,72)

===========================================================================

Begin optimization report for: S21_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S21_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(579,72)

===========================================================================

Begin optimization report for: T21_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T21_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(588,72)

===========================================================================

Begin optimization report for: Q21_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q21_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(597,72)

===========================================================================

Begin optimization report for: S22_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S22_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(607,72)

===========================================================================

Begin optimization report for: T22_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T22_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(616,72)

===========================================================================

Begin optimization report for: Q22_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q22_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(625,72)

===========================================================================

Begin optimization report for: S23_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S23_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(635,72)

===========================================================================

Begin optimization report for: T23_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (T23_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(644,72)

===========================================================================

Begin optimization report for: Q23_sum(double *, const double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Q23_sum(double *, const double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(653,72)

===========================================================================

Begin optimization report for: reset_M(double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (reset_M(double *, int)) D:\Code\KS\matmul-implement\bs_recursive.cpp(663,48)

===========================================================================

Begin optimization report for: std::numpunct<char>::~numpunct(std::numpunct<char> *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_G?$numpunct@D@std@@MEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      33
            Global    :      20
            Local     :      13
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::numpunct<char>::do_decimal_point(const std::numpunct<char> *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum(202,63):remark #34051: REGISTER ALLOCATION : [?do_decimal_point@?$numpunct@D@std@@MEBADXZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum:202

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    2[ rax rcx]
        
    Routine temporaries
        Total         :      22
            Global    :       0
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::numpunct<char>::do_thousands_sep(const std::numpunct<char> *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum(206,63):remark #34051: REGISTER ALLOCATION : [?do_thousands_sep@?$numpunct@D@std@@MEBADXZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum:206

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    2[ rax rcx]
        
    Routine temporaries
        Total         :      22
            Global    :       0
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::numpunct<char>::do_grouping(const std::numpunct<char> *, std::string *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum(210,59):remark #34051: REGISTER ALLOCATION : [?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum:210

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx r8-r9 r15]
        
    Routine temporaries
        Total         :      50
            Global    :      39
            Local     :      11
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+000 ~ 2.5%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::numpunct<char>::do_falsename(const std::numpunct<char> *, std::numpunct<char>::string_type *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum(214,65):remark #34051: REGISTER ALLOCATION : [?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum:214

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx r8-r9 r15]
        
    Routine temporaries
        Total         :      50
            Global    :      39
            Local     :      11
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+000 ~ 2.5%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::numpunct<char>::do_truename(const std::numpunct<char> *, std::numpunct<char>::string_type *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum(218,64):remark #34051: REGISTER ALLOCATION : [?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum:218

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx r8-r9 r15]
        
    Routine temporaries
        Total         :      50
            Global    :      39
            Local     :      11
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+000 ~ 2.5%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char>>>::~num_put(std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char>>> *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rsi r8]
        
    Routine temporaries
        Total         :      26
            Global    :      19
            Local     :       7
        Regenerable   :       1
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(2497,30):remark #34051: REGISTER ALLOCATION : [??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring:2497

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rsi r8]
        
    Routine temporaries
        Total         :      27
            Global    :      24
            Local     :       3
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocale(2217,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream(901,43):remark #34051: REGISTER ALLOCATION : [??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream:901

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8 r12 r14-r15 zmm0]
        
    Routine temporaries
        Total         :     733
            Global    :     562
            Local     :     171
        Regenerable   :      33
        Spilled       :      25
        
    Routine stack
        Variables     :     216 bytes*
            Reads     :      36 [2.02e+000 ~ 1.9%]
            Writes    :      32 [2.08e+000 ~ 2.0%]
        Spills        :     200 bytes*
            Reads     :      25 [5.00e+000 ~ 4.8%]
            Writes    :      25 [5.00e+000 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::sentry::~sentry(std::basic_ostream<char, std::char_traits<char>>::sentry *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(366,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream(104,47):remark #34051: REGISTER ALLOCATION : [??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream:104

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi r8 zmm0]
        
    Routine temporaries
        Total         :     152
            Global    :      94
            Local     :      58
        Regenerable   :      22
        Spilled       :       1
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :       4 [8.80e-001 ~ 1.7%]
            Writes    :      12 [2.88e+000 ~ 5.4%]
        Spills        :       8 bytes*
            Reads     :       1 [8.80e-001 ~ 1.7%]
            Writes    :       1 [1.00e+000 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::locale::~locale(std::locale *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocale(358,24):remark #34051: REGISTER ALLOCATION : [??1locale@std@@QEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocale:358

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ rax rdx rcx r8]
        
    Routine temporaries
        Total         :      28
            Global    :      21
            Local     :       7
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 3.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: transformA(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformA(double *, double *, int, int, double *)) D:\Code\KS\matmul-implement\u_transform.cpp(23,99)

===========================================================================

Begin optimization report for: get_transformed_size(int, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_transformed_size(int, int, int, int)) D:\Code\KS\matmul-implement\u_transform.cpp(12,87)

===========================================================================

Begin optimization report for: get_transformed_A_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_transformed_A_size(int, int)) D:\Code\KS\matmul-implement\u_transform.cpp(19,56)

===========================================================================

Begin optimization report for: transformB(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformB(double *, double *, int, int, double *)) D:\Code\KS\matmul-implement\v_transform.cpp(23,99)

===========================================================================

Begin optimization report for: get_transformed_size(int, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_transformed_size(int, int, int, int)) D:\Code\KS\matmul-implement\v_transform.cpp(12,87)

===========================================================================

Begin optimization report for: get_transformed_B_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_transformed_B_size(int, int)) D:\Code\KS\matmul-implement\v_transform.cpp(19,56)

===========================================================================

Begin optimization report for: transformC(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformC(double *, double *, int, int, double *)) D:\Code\KS\matmul-implement\w_transform.cpp(21,94)

===========================================================================

Begin optimization report for: get_transformed_size(int, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_transformed_size(int, int, int, int)) D:\Code\KS\matmul-implement\w_transform.cpp(10,87)

===========================================================================

Begin optimization report for: get_transformed_C_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (get_transformed_C_size(int, int)) D:\Code\KS\matmul-implement\w_transform.cpp(17,56)

===========================================================================

Begin optimization report for: print_vector(double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (print_vector(double *, int)) D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp(13,1)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(11,63)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(23,63)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(35,63)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(47,63)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(59,63)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(71,63)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(83,63)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(95,63)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_0_transform.cpp(107,63)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(4,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(11,71)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(19,71)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(27,71)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(35,71)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(43,71)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(51,71)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(59,71)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(67,71)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(75,71)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_1_transform.cpp(83,73)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(3,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(10,71)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(18,71)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(26,71)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(34,71)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(42,71)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(50,71)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(58,71)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(66,71)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(74,71)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(82,73)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(90,73)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_2_transform.cpp(98,73)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(3,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(10,71)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(18,71)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(26,71)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(34,71)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(42,71)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(50,71)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(58,71)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(66,71)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(74,71)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(82,73)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(90,73)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(98,73)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(106,73)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_3_transform.cpp(114,73)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(3,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(10,71)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(18,71)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(26,71)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(34,71)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(42,71)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(50,71)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(58,71)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(66,71)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(74,71)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(82,73)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(90,73)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(98,73)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(106,73)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(114,73)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(122,73)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(130,73)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_4_transform.cpp(138,73)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(3,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(10,71)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(18,71)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(26,71)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(34,71)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(42,71)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(50,71)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(58,71)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(66,71)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(74,71)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(82,73)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(90,73)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(98,73)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(106,73)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(114,73)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(122,73)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(130,73)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(138,73)

===========================================================================

Begin optimization report for: S18_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S18_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(146,73)

===========================================================================

Begin optimization report for: S19_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S19_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(154,73)

===========================================================================

Begin optimization report for: S20_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S20_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_5_transform.cpp(162,73)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(3,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(10,71)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(18,71)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(26,71)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(34,71)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(42,71)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(50,71)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(58,71)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(66,71)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(74,71)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(82,73)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(90,73)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(98,73)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(106,73)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(114,73)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(122,73)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(130,73)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(138,73)

===========================================================================

Begin optimization report for: S18_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S18_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(146,73)

===========================================================================

Begin optimization report for: S19_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S19_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(154,73)

===========================================================================

Begin optimization report for: S20_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S20_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(162,73)

===========================================================================

Begin optimization report for: S21_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S21_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(170,73)

===========================================================================

Begin optimization report for: S22_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S22_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(178,73)

===========================================================================

Begin optimization report for: S23_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S23_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(186,73)

===========================================================================

Begin optimization report for: u_phi_6_transform(double *, double *, int, int, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (u_phi_6_transform(double *, double *, int, int, double *)) D:\Code\KS\matmul-implement\u_phi_6_transform.cpp(195,107)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(15,63)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(28,63)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(41,63)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(54,63)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(67,63)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(80,63)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(93,63)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(106,63)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_0_transform.cpp(119,63)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_1_transform.cpp(96,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_2_transform.cpp(105,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(105,72)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(114,72)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(123,72)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_3_transform.cpp(132,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(105,72)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(114,72)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(123,72)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(132,72)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(141,72)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(150,72)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_4_transform.cpp(159,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(105,72)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(114,72)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(123,72)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(132,72)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(141,72)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(150,72)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(159,72)

===========================================================================

Begin optimization report for: S18_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S18_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(168,72)

===========================================================================

Begin optimization report for: S19_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S19_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(177,72)

===========================================================================

Begin optimization report for: S20_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S20_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\v_psi_5_transform.cpp(186,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_0_transform.cpp(87,70)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_1_transform.cpp(87,70)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_2_transform.cpp(96,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_3_transform.cpp(105,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(105,72)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(114,72)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(123,72)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_4_transform.cpp(132,72)

===========================================================================

Begin optimization report for: transformed_block_size(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (transformed_block_size(int, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(7,74)

===========================================================================

Begin optimization report for: S1_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S1_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(15,70)

===========================================================================

Begin optimization report for: S2_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S2_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(24,70)

===========================================================================

Begin optimization report for: S3_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S3_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(33,70)

===========================================================================

Begin optimization report for: S4_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S4_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(42,70)

===========================================================================

Begin optimization report for: S5_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S5_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(51,70)

===========================================================================

Begin optimization report for: S6_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S6_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(60,70)

===========================================================================

Begin optimization report for: S7_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S7_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(69,70)

===========================================================================

Begin optimization report for: S8_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S8_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(78,70)

===========================================================================

Begin optimization report for: S9_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S9_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(87,70)

===========================================================================

Begin optimization report for: S10_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S10_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(96,72)

===========================================================================

Begin optimization report for: S11_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S11_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(105,72)

===========================================================================

Begin optimization report for: S12_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S12_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(114,72)

===========================================================================

Begin optimization report for: S13_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S13_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(123,72)

===========================================================================

Begin optimization report for: S14_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S14_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(132,72)

===========================================================================

Begin optimization report for: S15_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S15_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(141,72)

===========================================================================

Begin optimization report for: S16_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S16_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(150,72)

===========================================================================

Begin optimization report for: S17_sum(const double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (S17_sum(const double *, double *, int)) D:\Code\KS\matmul-implement\w_tau_5_transform.cpp(159,72)

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Reallocate_grow_by<lambda [] type at line 40407, col. 13, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, lambda [] type at line 40407, col. 13, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34026: call to memcpy implemented as a call to optimized library version
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34026: call to memcpy implemented as a call to optimized library version
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34026: call to memcpy implemented as a call to optimized library version
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34026: call to memcpy implemented as a call to optimized library version
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(3809,99):remark #34051: REGISTER ALLOCATION : [??$_Reallocate_grow_by@V<lambda_12>@?1??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_12>@?1??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring:3809

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      73
            Global    :      38
            Local     :      35
        Regenerable   :       4
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Immortalize_impl<std::_Iostream_error_category>(void *, void *, void **)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(495,49):remark #34051: REGISTER ALLOCATION : [??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YAHPEAX0PEAPEAX@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:495

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ rax rdx rcx r8]
        
    Routine temporaries
        Total         :      24
            Global    :      19
            Local     :       5
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::make_error_code(std::error_code *, std::io_errc)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(297,71):remark #34051: REGISTER ALLOCATION : [?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:297

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rdi r8]
        
    Routine temporaries
        Total         :      29
            Global    :      22
            Local     :       7
        Regenerable   :       6
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::unique_ptr<std::_Facet_base, std::default_delete<std::_Facet_base>>::~unique_ptr(std::unique_ptr<std::_Facet_base, std::default_delete<std::_Facet_base>> *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\memory(1932,28):remark #34051: REGISTER ALLOCATION : [??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\memory:1932

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    3[ rax rdx rcx]
        
    Routine temporaries
        Total         :      24
            Global    :      19
            Local     :       5
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 3.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Iostream_error_category::message(const std::_Iostream_error_category *, std::string *, int) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(428,68):remark #34051: REGISTER ALLOCATION : [?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:428

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx r8-r9 r12]
        
    Routine temporaries
        Total         :      78
            Global    :      59
            Local     :      19
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 2.3%]
        Spills        :       8 bytes*
            Reads     :       2 [1.00e+000 ~ 2.3%]
            Writes    :       1 [1.00e+000 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Iostream_error_category::name(const std::_Iostream_error_category *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(424,67):remark #34051: REGISTER ALLOCATION : [?name@_Iostream_error_category@std@@UEBAPEBDXZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:424

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    2[ rax rcx]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_G_Iostream_error_category@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      25
            Global    :      19
            Local     :       6
        Regenerable   :       1
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Generic_error_category::message(const std::_Generic_error_category *, std::string *, int) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(412,68):remark #34051: REGISTER ALLOCATION : [?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:412

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx r8-r9 r13]
        
    Routine temporaries
        Total         :      53
            Global    :      40
            Local     :      13
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       1 [1.00e+000 ~ 2.3%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+000 ~ 2.3%]
            Writes    :       1 [1.00e+000 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Generic_error_category::name(const std::_Generic_error_category *) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(408,67):remark #34051: REGISTER ALLOCATION : [?name@_Generic_error_category@std@@UEBAPEBDXZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:408

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    2[ rax rcx]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_G_Generic_error_category@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ rax rdx rcx rdi]
        
    Routine temporaries
        Total         :      25
            Global    :      19
            Local     :       6
        Regenerable   :       1
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ios_base::failure::failure(std::ios_base::failure *, const std::ios_base::failure &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(334,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase(218,11):remark #34051: REGISTER ALLOCATION : [??0failure@ios_base@std@@QEAA@AEBV012@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase:218

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rbp zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :      20
            Local     :      12
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ios_base::failure::failure(std::ios_base::failure *, const char *, const std::error_code &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase(226,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(366,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase(227,48):remark #34051: REGISTER ALLOCATION : [??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase:227

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx r8-r9 zmm0]
        
    Routine temporaries
        Total         :      97
            Global    :      63
            Local     :      34
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       4 [3.05e+000 ~ 4.7%]
            Writes    :      10 [1.00e+001 ~ 15.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ios_base::failure::~failure(std::ios_base::failure *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase(218,11):remark #34051: REGISTER ALLOCATION : [??1failure@ios_base@std@@UEAA@XZ] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase:218

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    2[ rax rcx]
        
    Routine temporaries
        Total         :      23
            Global    :      18
            Local     :       5
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::ios_base::failure::~failure(std::ios_base::failure *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_Gfailure@ios_base@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      20
            Local     :       8
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::system_error::system_error(std::system_error *, const std::system_error &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(334,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(354,7):remark #34051: REGISTER ALLOCATION : [??0system_error@std@@QEAA@AEBV01@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:354

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rbp zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :      20
            Local     :      12
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::system_error::~system_error(std::system_error *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_Gsystem_error@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      20
            Local     :       8
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_System_error::_System_error(std::_System_error *, const std::_System_error &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(334,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(334,7):remark #34051: REGISTER ALLOCATION : [??0_System_error@std@@QEAA@AEBV01@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:334

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rbp zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :      20
            Local     :      12
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_System_error::_System_error(std::_System_error *, std::error_code, const std::string &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(346,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(55,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(56,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(346,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(310,9):remark #34026: call to memcpy implemented as a call to optimized library version
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(348,29):remark #34051: REGISTER ALLOCATION : [??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:348

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    9[ rax rdx rcx rdi r8 r12-r13 r15 zmm0]
        
    Routine temporaries
        Total         :     103
            Global    :      56
            Local     :      47
        Regenerable   :      15
        Spilled       :       4
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :       5 [4.05e+000 ~ 4.0%]
            Writes    :      15 [1.20e+001 ~ 12.0%]
        Spills        :      32 bytes*
            Reads     :       4 [4.00e+000 ~ 4.0%]
            Writes    :       4 [4.00e+000 ~ 4.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_System_error::_Makestr(std::string *, std::error_code, std::string *)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(333,9):remark #34008: call to memmove not inlined based on compiler heuristics
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(333,9):remark #34008: call to memmove not inlined based on compiler heuristics
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring(2408,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(336,66):remark #34051: REGISTER ALLOCATION : [?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:336

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r10 r15 zmm0]
        
    Routine temporaries
        Total         :     127
            Global    :      74
            Local     :      53
        Regenerable   :      11
        Spilled       :       4
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       8 [5.13e+000 ~ 5.0%]
            Writes    :       6 [6.00e+000 ~ 5.8%]
        Spills        :      32 bytes*
            Reads     :       4 [4.00e+000 ~ 3.9%]
            Writes    :       4 [4.00e+000 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_System_error::~_System_error(std::_System_error *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_G_System_error@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      20
            Local     :       8
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::error_category::equivalent(const std::error_category *, const std::error_code &, int) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(282,14):remark #34051: REGISTER ALLOCATION : [?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:282

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx r8-r9]
        
    Routine temporaries
        Total         :      29
            Global    :      21
            Local     :       8
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::error_category::equivalent(const std::error_category *, int, const std::error_condition &) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(277,14):remark #34051: REGISTER ALLOCATION : [?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:277

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx rsi r8]
        
    Routine temporaries
        Total         :      36
            Global    :      20
            Local     :      16
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       2 [1.05e+000 ~ 2.6%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+000 ~ 2.5%]
            Writes    :       1 [1.00e+000 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::error_category::default_error_condition(const std::error_category *, std::error_condition *, int) const

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error(272,14):remark #34051: REGISTER ALLOCATION : [?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error:272

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ rax rdx rcx r8]
        
    Routine temporaries
        Total         :      25
            Global    :       0
            Local     :      25
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::runtime_error::runtime_error(std::runtime_error *, const std::runtime_error &)

    Report from: Code generation optimizations [cg]

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h(68,5):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\stdexcept(122,7):remark #34051: REGISTER ALLOCATION : [??0runtime_error@std@@QEAA@AEBV01@@Z] C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\stdexcept:122

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    5[ rax rdx rcx r8 zmm0]
        
    Routine temporaries
        Total         :      31
            Global    :      20
            Local     :      11
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::runtime_error::~runtime_error(std::runtime_error *, unsigned int)

    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [??_Gruntime_error@std@@UEAAPEAXI@Z] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      20
            Local     :       8
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: <compiler generated>
        std::ctype<char>::~ctype(std::ctype<char> *, unsigned int)        
        std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *, unsigned int)
        std::numpunct<char>::~numpunct(std::numpunct<char> *, unsigned int)
        std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *, unsigned int)
        std::bad_cast::~bad_cast(std::bad_cast *, unsigned int)           
        std::exception::~exception(std::exception *, unsigned int)        
        std::runtime_error::~runtime_error(std::runtime_error *, unsigned int)
        std::_System_error::~_System_error(std::_System_error *, unsigned int)
        std::system_error::~system_error(std::system_error *, unsigned int)
        std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char>>>::~num_put(std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char>>> *, unsigned int)
        std::ios_base::failure::~failure(std::ios_base::failure *, unsigned int)

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\memory
        std::unique_ptr<std::_Facet_base, std::default_delete<std::_Facet_base>>::~unique_ptr(std::unique_ptr<std::_Facet_base, std::default_delete<std::_Facet_base>> *)[Line  1932]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\ostream
        std::basic_ostream<char, std::char_traits<char>>::_Sentry_base::~_Sentry_base(std::basic_ostream<char, std::char_traits<char>>::_Sentry_base *)[Line    75]
        std::basic_ostream<char, std::char_traits<char>>::sentry::~sentry(std::basic_ostream<char, std::char_traits<char>>::sentry *)[Line   104]
        std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)[Line   696]
        std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)[Line   901]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\stdexcept
        std::runtime_error::runtime_error(std::runtime_error *, const std::runtime_error &)[Line   122]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\system_error
        std::error_category::default_error_condition(const std::error_category *, std::error_condition *, int) const[Line   272]
        std::error_category::equivalent(const std::error_category *, int, const std::error_condition &) const[Line   277]
        std::error_category::equivalent(const std::error_category *, const std::error_code &, int) const[Line   282]
        std::make_error_code(std::error_code *, std::io_errc)             [Line   297]
        std::_System_error::_System_error(std::_System_error *, const std::_System_error &)[Line   334]
        std::_System_error::_Makestr(std::string *, std::error_code, std::string *)[Line   336]
        std::_System_error::_System_error(std::_System_error *, std::error_code, const std::string &)[Line   348]
        std::system_error::system_error(std::system_error *, const std::system_error &)[Line   354]
        std::_Generic_error_category::name(const std::_Generic_error_category *) const[Line   408]
        std::_Generic_error_category::message(const std::_Generic_error_category *, std::string *, int) const[Line   412]
        std::_Iostream_error_category::name(const std::_Iostream_error_category *) const[Line   424]
        std::_Iostream_error_category::message(const std::_Iostream_error_category *, std::string *, int) const[Line   428]
        std::_Immortalize_impl<std::_Iostream_error_category>(void *, void *, void **)[Line   495]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_exception.h
        std::exception::exception(std::exception *, const std::exception &)[Line    68]
        std::exception::what(const std::exception *) const                [Line    90]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\vcruntime_typeinfo.h
        std::bad_cast::bad_cast(std::bad_cast *, const std::bad_cast &)   [Line   124]
        std::bad_cast::~bad_cast(std::bad_cast *)                         [Line   124]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xiosbase
        std::ios_base::failure::~failure(std::ios_base::failure *)        [Line   218]
        std::ios_base::failure::failure(std::ios_base::failure *, const std::ios_base::failure &)[Line   218]
        std::ios_base::failure::failure(std::ios_base::failure *, const char *, const std::error_code &)[Line   227]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocale
        std::locale::~locale(std::locale *)                               [Line   358]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xlocnum
        std::numpunct<char>::do_decimal_point(const std::numpunct<char> *) const[Line   202]
        std::numpunct<char>::do_thousands_sep(const std::numpunct<char> *) const[Line   206]
        std::numpunct<char>::do_grouping(const std::numpunct<char> *, std::string *) const[Line   210]
        std::numpunct<char>::do_falsename(const std::numpunct<char> *, std::numpunct<char>::string_type *) const[Line   214]
        std::numpunct<char>::do_truename(const std::numpunct<char> *, std::numpunct<char>::string_type *) const[Line   218]

  File: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.20.27508\include\xstring
        std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)[Line  2497]
        std::basic_string<char, std::char_traits<char>, std::allocator<char>>::assign(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type)[Line  2684]
        std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Reallocate_grow_by<lambda [] type at line 40407, col. 13, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type>(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, lambda [] type at line 40407, col. 13, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type)[Line  3809]

  File: D:\Code\KS\matmul-implement\bs_recursive.cpp
        recursive_decomposed_bs(double *, double *, double *, int, int, double *)[Line   672]

  File: D:\Code\KS\matmul-implement\main.cpp
        main(int, const char **)                                          [Line    14]

  File: D:\Code\KS\matmul-implement\recursive_bilinear_algorithm.cpp
        run_recursive_bilinear_algorithm()                                [Line    31]

  File: D:\Code\KS\matmul-implement\u_phi_0_transform.cpp
        u_phi_0_transform(double *, double *, int, int, double *)         [Line   120]

  File: D:\Code\KS\matmul-implement\u_phi_1_transform.cpp
        u_phi_1_transform(double *, double *, int, int, double *)         [Line    92]

  File: D:\Code\KS\matmul-implement\u_phi_2_transform.cpp
        u_phi_2_transform(double *, double *, int, int, double *)         [Line   107]

  File: D:\Code\KS\matmul-implement\u_phi_3_transform.cpp
        u_phi_3_transform(double *, double *, int, int, double *)         [Line   124]

  File: D:\Code\KS\matmul-implement\u_phi_4_transform.cpp
        u_phi_4_transform(double *, double *, int, int, double *)         [Line   147]

  File: D:\Code\KS\matmul-implement\u_phi_5_transform.cpp
        u_phi_5_transform(double *, double *, int, int, double *)         [Line   171]

  File: D:\Code\KS\matmul-implement\v_psi_0_transform.cpp
        v_psi_0_transform(double *, double *, int, int, double *)         [Line   131]

  File: D:\Code\KS\matmul-implement\v_psi_1_transform.cpp
        v_psi_1_transform(double *, double *, int, int, double *)         [Line   104]

  File: D:\Code\KS\matmul-implement\v_psi_2_transform.cpp
        v_psi_2_transform(double *, double *, int, int, double *)         [Line   113]

  File: D:\Code\KS\matmul-implement\v_psi_3_transform.cpp
        v_psi_3_transform(double *, double *, int, int, double *)         [Line   140]

  File: D:\Code\KS\matmul-implement\v_psi_4_transform.cpp
        v_psi_4_transform(double *, double *, int, int, double *)         [Line   167]

  File: D:\Code\KS\matmul-implement\v_psi_5_transform.cpp
        v_psi_5_transform(double *, double *, int, int, double *)         [Line   194]

  File: D:\Code\KS\matmul-implement\w_tau_0_transform.cpp
        w_tau_0_transform(double *, double *, int, int, double *)         [Line    95]

  File: D:\Code\KS\matmul-implement\w_tau_1_transform.cpp
        w_tau_1_transform(double *, double *, int, int, double *)         [Line    95]

  File: D:\Code\KS\matmul-implement\w_tau_2_transform.cpp
        w_tau_2_transform(double *, double *, int, int, double *)         [Line   104]

  File: D:\Code\KS\matmul-implement\w_tau_3_transform.cpp
        w_tau_3_transform(double *, double *, int, int, double *)         [Line   113]

  File: D:\Code\KS\matmul-implement\w_tau_4_transform.cpp
        w_tau_4_transform(double *, double *, int, int, double *)         [Line   140]

  File: D:\Code\KS\matmul-implement\w_tau_5_transform.cpp
        w_tau_5_transform(double *, double *, int, int, double *)         [Line   167]


  0 out of 67 routine(s) used training profile data for PGO feedback
  0 out of 67 routine(s) were unable to use training profile data for PGO feedback
  0 out of 67 routine(s) were unable to find training profile data for PGO feedback
  67 out of 67 routine(s) used a static estimate profile for PGO feedback



